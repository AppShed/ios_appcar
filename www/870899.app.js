appbuilder.app.FileLoader.fetched({"settings":{"currentscreen":null,"main":"870899","maintype":"app"},"app":{"870899":{"html":"<style scoped>\/* Custom CSS *\/\n\n#app870899 .screen {\n\n\tcolor: rgb(255,255,255);\n}\n#app870899 .item.thumb \n \n, \n#app870899 .item.plain \n \n, \n#app870899 .item.text \n \n, \n#app870899 .item.textbox \n \n, \n#app870899 .item.button   {\n\n\n\n    background-color: rgba(0,0,0,0.3);\n\tmargin: 10px 10px;\n}\n#app870899 .width50  {\n\n\n  float: left; \n  width: 45%;\n}\n#app870899 .clearboth  {\n\n\n   clear: both;\t\n}\n#app870899 .flush   {\n\n\n\tmargin: 0px;\t\n}\n#app870899 .item.image  {\n\n\n\t\n    text-align: center;\n    background-color: black;\n}\n#app870899 .transparent.item.image  {\n\n\n\tbackground: transparent;\n}\n#app870899 .button  {\n\n\n\tcolor: Black;\n}\n#app870899 button  {\n\n\tcolor: rgb(255,255,255);\n}\n#app870899 .item-icon-inner .title  {\n\n\tcolor: rgb(255,255,255);\n}\n#app870899 .screen.list .items  {\n\n\tbackground-image: url(https:\/\/d1yeqpqwjn2qg3.cloudfront.net\/WWwugf2Zecrqc26VaJZvPT8pd4k=\/fit-in\/640x960\/http:\/\/appshed-id-images.s3-website-eu-west-1.amazonaws.com\/4047619);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center center;\n\tbackground-size: cover;\n\tbackground-color: rgb(48,48,48);\n}\n#app870899 .item  {\n\n\tborder-bottom-color: rgb(66,66,66);\n}\/* End Custom CSS *\/\n#app870899.splash {\n\tbackground-image: url(4302407splash_x2);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center center;\n\tbackground-size: cover;\n}\n.android .phone-navigator #app870899.app .app-navigator .screen .header .back {\n\tbackground-image: url(4305186icon);\n}\n.blackberry .phone-navigator #app870899.app .app-navigator .screen .header {\n\tbackground-image: url(4305186icon);\n}\n<\/style><div class=\"app\" id=\"app870899\" data-name=\"AppCar.io\" data-board=\"4901\" data-description=\"A Remote Controlled Car, built using AppShed IoT. &#10;&#10;Go to www.appcar.io for more information, download instructions and learn how to write your own auto-pilot code.\" data-flag=\"default\" data-preview-url=\"http:\/\/appshed.com\/appbuilder\/preview\/appcario\" data-webview-url=\"http:\/\/apps.appshed.com\/appcario\" data-icon=\"4305186icon\"><div class=\"app-navigator\"><div class=\"app-navigator-inner\"><div class=\"app-navigator-inner-sides\"><\/div><div class=\"app-navigator-inner-sides\"><\/div><\/div><\/div><div class=\"tab-bar\"><table><tr class=\"tar-bar-inner\"><td class=\" tab link link-no-arrow\" id=\"tab2819845\" data-linktype=\"screen\" data-href=\"13474600\" x-blackberry-focusable=\"true\"><div class=\"tab-inner\"><div class=\"label\">Home<\/div><img class=\"icon\" src=\"4tab_x2\"\/><\/div><\/td><td class=\" tab link link-no-arrow\" id=\"tab2628223\" data-linktype=\"screen\" data-href=\"11910914\" x-blackberry-focusable=\"true\"><div class=\"tab-inner\"><div class=\"label\">Drive<\/div><img class=\"icon\" src=\"1579483tab_x2\"\/><\/div><\/td><td class=\" tab link link-no-arrow\" id=\"tab2820636\" data-linktype=\"screen\" data-href=\"13485248\" x-blackberry-focusable=\"true\"><div class=\"tab-inner\"><div class=\"label\">Calibrate<\/div><img class=\"icon\" src=\"1579303tab_x2\"\/><\/div><\/td><td class=\" tab link link-no-arrow\" id=\"tab2820661\" data-linktype=\"screen\" data-href=\"13485322\" x-blackberry-focusable=\"true\"><div class=\"tab-inner\"><div class=\"label\">Code<\/div><img class=\"icon\" src=\"1579348tab_x2\"\/><\/div><\/td><td class=\" tab link link-no-arrow\" id=\"tab2628225\" data-linktype=\"screen\" data-href=\"11910919\" x-blackberry-focusable=\"true\"><div class=\"tab-inner\"><div class=\"label\">Settings<\/div><img class=\"icon\" src=\"1579340tab_x2\"\/><\/div><\/td><\/tr><\/table><\/div><\/div>","splashhtml":"<style scoped>\/* Custom CSS *\/\n\n#app870899 .screen {\n\n\tcolor: rgb(255,255,255);\n}\n#app870899 .item.thumb \n \n, \n#app870899 .item.plain \n \n, \n#app870899 .item.text \n \n, \n#app870899 .item.textbox \n \n, \n#app870899 .item.button   {\n\n\n\n    background-color: rgba(0,0,0,0.3);\n\tmargin: 10px 10px;\n}\n#app870899 .width50  {\n\n\n  float: left; \n  width: 45%;\n}\n#app870899 .clearboth  {\n\n\n   clear: both;\t\n}\n#app870899 .flush   {\n\n\n\tmargin: 0px;\t\n}\n#app870899 .item.image  {\n\n\n\t\n    text-align: center;\n    background-color: black;\n}\n#app870899 .transparent.item.image  {\n\n\n\tbackground: transparent;\n}\n#app870899 .button  {\n\n\n\tcolor: Black;\n}\n#app870899 button  {\n\n\tcolor: rgb(255,255,255);\n}\n#app870899 .item-icon-inner .title  {\n\n\tcolor: rgb(255,255,255);\n}\n#app870899 .screen.list .items  {\n\n\tbackground-image: url(https:\/\/d1yeqpqwjn2qg3.cloudfront.net\/WWwugf2Zecrqc26VaJZvPT8pd4k=\/fit-in\/640x960\/http:\/\/appshed-id-images.s3-website-eu-west-1.amazonaws.com\/4047619);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center center;\n\tbackground-size: cover;\n\tbackground-color: rgb(48,48,48);\n}\n#app870899 .item  {\n\n\tborder-bottom-color: rgb(66,66,66);\n}\/* End Custom CSS *\/\n#app870899.splash {\n\tbackground-image: url(4302407splash_x2);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center center;\n\tbackground-size: cover;\n}\n<\/style><div class=\"splash\" id=\"app870899\"><\/div>","updated":1498547362,"secure":{"login":null,"register":null},"css":"","javascript":"\/\/ JavaScript object to provide additional client-side features to AppShed apps.\n\t\t\t\/\/ This code must be copied into the Custom JavaScript field\n\t\t\t\/\/ Open any app with AppShed app-builder, go to Settings -> Advanced tab and find Custom JavaScript\n\t\t\t\/\/ Created by T Stauch\n\t\t\t\/\/ v1 (25-5-2016)\n\t\t\t\/\/ appshed.com\n\t\t\t\/\/\n\t\t\t\/\/ v1.1 (26-5-2016) Added some methods to set colors for Item Text and Background\n\t\t\t\/\/ v1.1.1 (02-06-2016) error handling, setInterval()\n\t\t\t\/\/ v1.1.2 (02-06-2016) app.addDevice()\n\t\t\t\/\/ v1.1.3 (10-06-2016) app.getRandomColor(), app.appendToVariable(), screen.setBackgroundColor\n\t\t\t\/\/ v1.1.4 (20-06-2016) Support for Device LocalIP usage\n\t\t\t\/\/ v1.1.5 (22-06-2016) Enhancements to Device class\n\t\t\t\/\/ v1.1.6 (02-07-2016) Support for IoT Board layouts\n\t\t\t\/\/ v1.1.7 (23-07-2016) Support for built-in LED, simpler device calling, stability improvements\n\t\t\t\/\/ v1.1.8 (10-08-2016) Support for findLocalDevices, blink LED\n\t\t\t\/\/ v1.2.1 (06-10-2016) aREST Pro support added. aREST local-and-cloud not supported\n\t\t\t\/\/ v1.2.2 (26-10-2016) Minor changes and additions\n\t\t\t\/\/ v1.2.3 (07-11-2016) Support for aREST Pro enhancements\n\t\t\t\/\/ v1.2.4 (12-11-2016) Send aREST Commands - multiple pin settings in one API call, servo support\n\t\t\t\/\/ v1.2.5 (15-12-2016) Tie device outputs to app variables to monitor values\n\t\t\t\/\/ v1.2.6 (20-12-2016) Event and Timer handling improvements\n\t\t\t\/\/ v1.2.7 (23-12-2016) Support for single device running a softAP (Access Point)\n\t\t\t\/\/ v1.2.8 (26-12-2016) Touch position, touchX, touchY, touchAngle etc.\n\t\t\t\/\/ v1.2.9 (11-01-2017) Logo commands\n\t\t\t\/\/ v1.3.0 (17-02-2017) Motion Driving\n\t\t\t\/\/ v1.3.1 (12-03-2017) Switching between AP and Cloud mode\n\t\t\t\/\/ v1.3.2 (29-03-2017) Loop function \n\t\t\t\/\/ v1.3.3 (01-04-2017) Form class added\n\t\t\t\/\/ v1.3.4 (05-04-2017) import (library), applyStyles, range\/slider and other special inputs\n\t\t\t\/\/ v1.3.5 (09-04-2017) import improvements, accordion\n\t\t\t\/\/ v1.3.6 (17-04-2017) RGB LED, theme & import in Description\n\t\t\t\/\/ v1.3.7 (26-04-2017) Form localStorage save, aggregate functions\n\t\t\t\/\/ v1.3.8 (28-04-2017) Data Class, Aggregate, Email, Statistics, AppBuilder CSS, Blue light\n\t\t\t\/\/ v1.3.9 (05-05-2017) Data calculations, Data select, Data filters\n\t\t\t\/\/ v1.3.10 (07-05-2017) Data enhancements\n\t\t\t\/\/ v1.3.11 (14-05-2017) NeoPixel basic support\n\t\t\t\/\/ v1.3.12 (27-05-2017) UI enhancements\n\t\t\t\/\/ v1.3.13 (01-06-2017) Device supports Sketch 39 (getInfo() sends all pin values)\n\t\t\t\/\/ v1.3.14 (07-06-2017) Minor enhancements, PhoneGap\/Cordova fixes\n\t\t\t\/\/ v1.3.15 (13-06-2017) AppBuilder UI enhancements\n\n\t\t\t\n\t\t\t\/\/ HOW TO USE\n\t\t\t\/\/ Add this line of code to the top of Custom JavaScript in your app (remove the comments \/\/):\n\t\t\t\/\/       window.app = app; var script= document.createElement('script'); script.type= 'text\/javascript'; script.src='https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/files\/appjs.js'; document.getElementsByTagName('head')[0].appendChild(script);\n\n\n\t\t\t\/\/ Special Features -  Custom Class\n\t\t\t\/\/ \"hidden\" - add to a tab, screen or item to hide that thing\n\t\t\t\/\/ \"scroll-disabled\" - add to a Screen to disabled scrolling.\n\t\t\t\/\/ \"no-arrow\" - add to a link to hide the navigate arrow\n\n\n\t\t\t\/\/ TO DO\n\t\t\t\/\/ from V1.1.5 it is not working in Android native app - needs fixing.\n\t\t\t\/\/ Query IOIO boards for setup https:\/\/iot-api.appshed.com\/api\/boards\/4195\/outputs\n\t\t\t\/\/ Docs https:\/\/iot-api.appshed.com\/api\/doc\/\n\t\t\t\/\/ \n\n\t\t\t\/\/ NOTES\n\t\t\t\/\/ methods starting with _ are private methods\n\n\n\n\t\ttry{\n\n\n\t\t\twindow.app = app;\n\n\t\t\tapp.version = \"1.3.15\"; \/\/ The version number of this code\n\n\n\n\n\t\t\t\/\/ APP Settings\n\t\t\tapp._REQUIREJQUERYSCRIPTS = true;\n\t\t\tapp._JQUERYHARDCODED = false;\n\n\n\t\t\t\/\/ APP Properties\n\t\t\tapp._actions = {}; \/\/ an object holding actions for each item. Each `key` is `idOrClassName`. Each value is an `Array`, allowing multiple actions to be stored for each `Item`\n\t\t\tapp._appData = {}; \/\/ object to hold app data for other apps\n\t\t\tapp._appIPAddresses = [];\n\t\t\tapp._ajaxqURL = \"https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/files\/ajaxqjs.js\";\n\t\t\tapp._autoConnectDevices = false; \/\/ must the app attempt auto connecting devices\n\t\t\tapp._autoConnectGotLocal = false;\n\t\t\tapp._autoConnectHandle; \/\/ handle for the interval\n\t\t\tapp._autoConnectInterval = 5000; \/\/ time interval for attempting auto connect\n\t\t\tapp._autoConnectTimestamp = 0; \/\/ timestamp for that last connection attempt\n\t\t\tapp._currentItemId = null;\n\t\t\tapp._currentScreen = null;\n\t\t\tapp._currentHoverElement; \/\/ The DOM `Element` that is currently hovered over\n\t\t\tapp._currentHoverItem; \/\/ The `Item` Object currently hovered over\n\t\t\tapp._defaultDevice = null;\n\t\t\tapp._devices = {};\n\t\t\tapp._formItemsCSSSelector = \".screen input, .screen textarea, .screen .picker .picked, .screen .select .selected\"; \/\/ The CSS Selectors to find all form Items\n\t\t\tapp._handler_arestScriptsInterval = null;\n\t\t\tapp._importsDone = false;\n\t\t\tapp._intervals = {}; \/\/ an object of all the Intervals started for the app using app.setInterval()\n\t\t\tapp._ioBatchMode = true; \/\/ Send IO commands to devices in batches\n\t\t\tapp._ioBatchTimeout = 100; \/\/ how long to wait while collecting IO commands (e.g. from multiple Blockly commands)\n\t\t\tapp._ioMaxCommandsPerBatch = 4;\n\t\t\tapp._isActiveTouchmove = false;\n\t\t\tapp._items = {}; \/\/ Object to hold `Item` objects;\n\t\t\tapp._jqueryURL = \"https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/files\/jquery-320minjs.js\";\n\t\t\tapp._jqueryURL311 = \"https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/files\/jquery-311minjs.js\";\n\t\t\tapp._lastScrollRulesScreen = 0;\n\t\t\tapp._loopFunctions = []; \/\/ array of functions to call on loop\n\t\t\tapp._loopTimeout = 100; \/\/ Time delay between loop calls\n\t\t\tapp._scanIPTimeout = 4000; \/\/ The timeout for requests when scanning local IP addresses.\n\t\t\tapp._screen_el = null;\n\t\t\tapp._screens = {}; \/\/ Object to hold `Screen` objects\n\t\t\tapp._scripts;\n\t\t\tapp._scriptLoaded_jquery = false;\n\t\t\tapp._scriptLoaded_ajaxq = false;\n\t\t\tapp._scriptLoading_ajaxq = false;\n\t\t\tapp._scriptLoading_jquery = false;\n\t\t\tapp._scriptsLoaded_arest = false;\n\t\t\tapp._url_boardWithPins = 'https:\/\/iot-api.appshed.com\/api\/boards\/withpins\/';\n\n\t\t\tapp.deviceMotionEvent = null;\n\t\t\tapp.data = new AppShedData(); \/\/ Handles the data on the current screen\n\t\t\tapp.id;\n\t\t\tapp.isMobile_xxx; \/\/ Will be true when running on a supported mobile device (actual property is app.isMobile)\n\t\t\tapp.isPhoneGap_xxx; \/\/ Will be true when running on a phonegap platform (actual property is app.isPhoneGap)\n\t\t\tapp.isTouching = false;\n\t\t\tapp.touchStartX = 100; \/\/ The x coordinate of the touchStart point\n\t\t\tapp.touchStartY = 100; \/\/ The y coordinate of the touchStart point\n\t\t\tapp.touchX = 100; \/\/ The x coordinate of the current touch point\n\t\t\tapp.touchY = 100; \/\/ The y coordinate of the current touch point\n\t\t\tapp.touchAngle = 0; \/\/ The angle in degrees of the current touch point relative to touchStart\n\n\n\t\t\t\/\/ Properties that might already be set\n\t\t\tif(app.disableSystemAlerts == undefined)\n\t\t\t\tapp.disableSystemAlerts = false; \/\/ If true the system alerts won't display (messages for updates, offline etc)\n\n\n\n\t\t\t\/\/ APP Methods\n\n\n\n\t\t\tapp._init = function(){\n\n\t\t\t\tapp.element = document.getElementsByClassName('app')[0];\n\t\t\t\tapp.id = String(app.element.id).replace(\/app\/,\"\");\n\t\t\t\tapp.description = app.element.dataset.description;\n\n\n\t\t\t\tif(app._REQUIREJQUERYSCRIPTS)\n\t\t\t\t\tapp.setInterval(app.addJQueryScripts(),1000,10000)\n\n\t\t\t\tapp.element.removeEvent('touchstart', app.onTouchstart);\n\t\t\t\tapp.element.removeEvent('mousedown', app.onTouchstart);\n\t\t\t\tapp.element.addEvent('touchstart', app.onTouchstart);\n\t\t\t\tapp.element.addEvent('mousedown', app.onTouchstart);\n\n\t\t\t\tapp.element.removeEvent('touchmove', app.onTouchmove);\n\t\t\t\tapp.element.removeEvent('mousemove', app.onTouchmove);\n\t\t\t\tapp.element.addEvent('touchmove', app.onTouchmove);\n\t\t\t\tapp.element.addEvent('mousemove', app.onTouchmove);\n\n\t\t\t\tapp.element.removeEvent('touchend', app.onTouchend);\n\t\t\t\tapp.element.removeEvent('mouseup', app.onTouchend);\n\t\t\t\tapp.element.addEvent('touchend', app.onTouchend);\n\t\t\t\tapp.element.addEvent('mouseup', app.onTouchend);\n\n\n\t\t\t\tif(navigator && navigator.accelerometer){\n\t\t\t\t\t\/\/ Cordova\n\t\t\t\t\tnavigator.accelerometer.watchAcceleration(app.deviceMotionHandler,null,{frequency: 100})\n\t\t\t\t} else if (window.DeviceMotionEvent) {\n\t\t\t\t\t\/\/ Web app\n\t\t\t\t\twindow.addEventListener('devicemotion', app.deviceMotionHandler, false);\n\t\t\t\t} else {\n\n\t\t\t\t}\n\n\n\n\n\t\t\t\t\/\/ add the event handlers to the `Tab` to initialise the screen\n\t\t\t\tapp.phone.addEvent('tab',function( id,el ){\n\n\t\t\t\t});\n\n\t\t\t\t\/\/ add the event handlers to the `Screen` to initialise the screen\n\t\t\t\tapp.phone.addEvent('screen',function( id,el ){\n\n\t\t\t\t\tapp._currentScreen = id;\n\n\t\t\t\t\t\/\/ log screen classNames, id\n\/\/app._saveScreenData(id,el)\n\n\t\t\t\t\t\/\/ to capture `click` events\n\t\t\t\t\tapp.addScreenClickHandlers(id,el)\n\t\t\t\t\t\n\t\t\t\t\t\/\/ to re-format Capture elements using HTML5\n\t\t\t\t\tapp.reformatCaptureItems(id,el);\n\n\t\t\t\t\t\/\/ to re-format range elements using HTML5\n\t\t\t\t\tapp.reformatInputTypes(id,el);\n\n\t\t\t\t\t\/\/ reformat data items\n\t\t\t\t\tapp.reformatDataItems(id,el);\n\n\t\t\t\t\t\/\/ Initialise accordions on the screen\n\t\t\t\t\tapp.initAccordion.call(el);\n\n\t\t\t\t\t\/\/ disable scroll\n\t\t\t\t\tapp.applyScrollRules(el)\n\n\t\t\t\t});\n\n\n\t\t\t\tif(app._autoConnectDevices)\n\t\t\t\t\tsetTimeout(app.autoConnectDevices,app._autoConnectInterval)\n\n\n\t\t\t\tsetTimeout(app.loop,app._loopTimeout);\n\n\n\t\t\t\t\/\/ Import andy required libraries\n\t\t\t\tapp.doImports();\n\n\n\t\t\t\tapp._init2();\n\n\n\t\t\t}\n\n\n\n\n\t\t\tapp._init2 = function(){\n\t\t\t\t\/\/ some init tasks can only be done once jQuery loaded\n\n\t\t\t\tif(app._scriptLoaded_jquery && app._scriptLoaded_ajaxq && app._importsDone){\n\n\n\n\n\t\t\t\t\tapp.addCoreStyles();\n\n\n\n\n\t\t\t\t\tif(!app.isMobile){\n\t\t\t\t\t\t\/\/ Pulsing light\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tjQuery('.phone.background').prepend(\"<div class='light-pulse' style='  position: absolute;  left:  50px;  top: 35px;'><img src='https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/modules\/pulsing-blue4gif.gif' title='\"+ app.version +\"' width='10'><\/div>\");\n\t\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t\tapp.handleError(er,\"Can't show status LED app._init2\")\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\n\n\n\t\t\t\t\t\/\/ if there is an app.init() function in this app, call it\n\t\t\t\t\tif(typeof app.init == \"function\")\n\t\t\t\t\t\tapp.init();\n\n\t\t\t\t\tapp.doThemes();\n\n\t\t\t\t} else\n\t\t\t\t\tsetTimeout(app._init2,500);\n\n\t\t\t}\n\n\n\n\n\n\n\t\t\tapp.addActions = function(arr){\n\t\t\t\t\/\/ Adds actions to `Items`\n\t\t\t\t\/\/ `arr` is an `Array` of `descriptors` in the format:\n\t\t\t\t\/\/ `arr = [  \n\t\t\t\t\/\/    { idOrClassName: \"\" , actionType: \"\", handler: [ad-hoc function] }\n\t\t\t\t\/\/ ]`\n\t\t\t\t\/\/\n\t\t\t\t\/\/ `idOrClassName` - this can be the `itemId`, the `DOM id` or a `Classname` for the item\n\t\t\t\t\n\t\t\t\tfor(i=0;i<arr.length;i++){\n\t\t\t\t\tapp.addAction(arr[i].idOrClassName,arr[i].handler);\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.addAction = function(idOrClassName,handler){\n\t\t\t\t\/\/ Adds an action `handler` for `idOrClassName`\n\t\t\t\t\/\/ Multiple actions can be added for each `idOrClassName`\n\t\t\t\t\n\t\t\t\t\/\/ See if `_actions` is instantitated for this idOrClassName\n\t\t\t\tif(!this._actions[idOrClassName])\n\t\t\t\t\tthis._actions[idOrClassName] = [];\n\t\t\t\t\n\t\t\t\t\/\/ Add this to the array of actions\n\t\t\t\tthis._actions[idOrClassName].push(handler)\n\t\t\t\t\n\t\t\t\t   \n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.addCoreStyles = function(){\n\t\t\t\t\/\/ Add the core styles to the page\n\t\t\t\t\/\/ These can be used in the Custom Class field of the Styles tab for tabs, screens and items\n\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\t\/\/ Accordion\n\t\t\t\tapp.addStyles(\"#app\"+app.id+\" .accordion .title{\tline-height: 40px; } #app\"+app.id+\" .accordion.item{ \tmargin-bottom: 0px; \/* fix bootstrap style *\/ }  #app\"+app.id+\" .accordion.image-float-right .image-container{ \tfloat: right; }  #app\"+app.id+\" .accordion.image-20 .image{ \twidth: 20px; }    #app\"+app.id+\" .accordion.image-40 .image{ \twidth: 40px; }  #app\"+app.id+\" .accordion.image-rotate.item img.rotate { \t     -moz-transform: rotate(-90deg); \/* Firefox *\/     -ms-transform: rotate(-90deg); \/* IE *\/     -webkit-transform: rotate(-90deg); \/* Safari, Chrome, iOS *\/     -o-transform: rotate(-90deg); \/* Opera *\/     transform: rotate(-90deg);    }  #app\"+app.id+\" .accordion.image-rotate.item img{ \t-webkit-transition: all 0.5s ease-out 0.2s;      -moz-transition: all 0.5s ease-out 0.2s;      -o-transition: all 0.5s ease-out 0.2s;      transition: all 0.5s ease-out 0.2s;  }\");\n\n\n\t\t\t\t\/\/ Input, range, color\n\t            app.addStyles(\"#app\"+app.id+\" input[type=range], #app\"+app.id+\" input[type=color]{width: 100% !important;} #app\"+app.id+\" input[type=color] { -webkit-appearance: none; border: none; } #app\"+app.id+\" input[type=color]::-webkit-color-swatch-wrapper { padding: 0; } #app\"+app.id+\" input[type=color]::-webkit-color-swatch { border: none; } #app\"+app.id+\" input[type=color]{padding: 0px;}\"); \n\t\t\t\t\n\t\t\t\t\/\/ position\n\t\t\t\tapp.addStyles(\".position-absolute{ position: absolute; } .position-relative{ position: relative; } .float-left{ float: left; } .float-right{ float: rigth; } .clear-right{ clear: right; } .clear-left{ clear: left; } .clear-both{clear:both} .width-1-3{ width: 30%; } .width-2-3{ width: 62%; } .width-1-4{ width: 22%; } .width-1-2{ width: 46%; } .width-3-4{ width: 71%; } .image-float-right img{float: right;}\");\n\n\t\t\t\t\/\/ tables\n\t\t\t\tapp.addStyles(\".screen .datatable table{width: 100%;}.screen .datatable th{color:#000000;  background:#a6a6a6;  border-bottom:1px solid #22262e;  border-right: 1px solid #22262e;  font-weight: normal;  padding:10px;  text-align:left;  vertical-align:middle;}.screen .datatable th:last-child{border-right:none;} .screen .datatable tr{border-top: 1px solid #C1C3D1;  border-bottom-: 1px solid #C1C3D1;  color:#494949;  font-size:16px;}.screen .datatable tr:hover td{background:#a6a6a6;  color:#FFFFFF;  border-top: 1px solid #22262e;  border-bottom: 1px solid #22262e;}.screen .datatable tr:first-child{border-top:none;}.screen .datatable tr:last-child{border-bottom:none;}.screen .datatable tr:nth-child(odd) td{background:#EBEBEB;}.screen .datatable tr:nth-child(odd):hover td{background:#a6a6a6;}.screen .datatable td{background:#FFFFFF;  padding:12px;  text-align:left;  vertical-align:middle;  border-right: 1px solid #C1C3D1;}.screen .datatable td:last-child{border-right: 0px;}\");   \n\n\n\t\t\t\t\/\/ Text\n\t\t\t\tapp.addStyles(\".text-align-center input{text-align: center;} \");\n\n\n\t\t\t\t\/\/ display, show hide\n\t\t\t\tapp.addStyles(\".no-arrow.link .link-arrow{display: none;} \");   \n  \n\n\n\t\t\t\t\/\/ ------------------------------\n\t\t\t\t\/\/ AppBuilder UI\n\t\t\t\t\/\/ ------------------------------\n\n\n\t\t\t\t\/\/ Controls on Forms\n\t\t\t\tapp.addStyles(\".controls .help-block{line-height: normal; font-style: italic;}\");\n\n\t\t\t\t\/\/ Module Popup\n\t\t\t\tapp.addStyles(\".categories-list-popup a { background-repeat: no-repeat; background-image: url(https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/modules\/folder2png.png); padding: 10px; padding-left: 60px; background-color: silver; width: 85%; display: inline-block; margin-bottom: 5px; }  ul.categories-list-popup{ margin-left: 0px; }\");\n\n\t\t\t\t\/\/ Image Chooser\n\t\t\t\tapp.addStyles(\"li.group-browser-group i.collapsed{     background-size: 22px;     height: 22px;     width: 22px;     background-repeat: no-repeat;     background-image: url(https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/appbuilder\/arrow-inactive-lgpng.png); }\");\n\t\t\t\tapp.addStyles(\"li.group-browser-group i.expanded{     background-size: 22px;     height: 22px;     width: 22px;     background-repeat: no-repeat;     background-image: url(https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/appbuilder\/arrow-active-lgpng.png); }\");\n\t\t\t\tapp.addStyles(\"li.group-browser-group i.icon-circle{     font-size: 10px;      height: 22px;     width: 22px;   display: inline-block; }\");\n\n\t\t\t\t\/\/ ID\n\t\t\t\tapp.addStyles(\".control-group:last-of-type{ border: 1px solid silver;     background-color: #f2f2f2; }\");\n\t\t\t\tapp.addStyles(\"$.control-group .variable-chooser{ border: none\");\n\n\n\n\t\t\t\t\/\/ Actions Extensions Drop-down\n\t\t\t\tapp.addStyles(\".action-selector .action.selected {    background-color: #C8C8C8;background-image: url(https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/4\/4f\/TriangleArrow-Down.svg\/532px-TriangleArrow-Down.svg.png);    background-size: 20px 20px;    background-repeat: no-repeat;    background-position-x: 372px;    background-position-y: 20px;}\");\n\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.addCSS = function(url){\n\t\t\t\t\/\/ Loads `url` as a CSS file to the page\n\n\t\t\t\treturn jQuery('head').append('<link rel=\"stylesheet\" href=\"' + url + '\" type=\"text\/css\" \/>');\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.addDevice = function(props){\n\n\t\t\t\t\/\/ adds an IoT Device (such as ESP8266, RaspberryPi or Arduino) to this app. \n\t\t\t\t\/\/ `props` is a JSON object containing the properties of the device\n\n\n\t\t\t  try{\n\n\t\t\t\tvar device;\n\n\t\t\t\tdevice = new Device(props);\n\n\t\t\t\tapp._devices[props.id] = device;\n\n\t\t\t\t\/\/ If this is the first device added, make it the default\n\t\t\t\tif(Object.keys(app._devices).length == 1){\n\t\t\t\t\tapp._defaultDevice = props.id;\n\t\t\t\t}\n\t\t\t\treturn device;\n\n\t\t\t  }catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.addDevice()\")\t\n\t\t\t  }\n\n\t\t\t}\n\n\n\n\t\t\tapp.addHoverImages = function(imageArray){\n\t\t\t\t\/\/ Adds hover images that appear when the user hovers over the `Item` \n\t\t\t\t\/\/ Works with touch and mouse events\n\t\t\t\t\/\/ `imageArray` is an array of objects in the format \n\t\t\t\t\/\/    `[\n\t\t\t\t\/\/\t   `{`\n\t\t\t\t\/\/\t\t`id: id,`\n\t\t\t\t\/\/\t\t`class: className,`\n\t\t\t\t\/\/\t\t`url: imageURL,`\n\t\t\t\t\/\/\t\t`doActions: true|false`\n\t\t\t\t\/\/\t   `}`,\n\t\t\t\t\/\/\t\t...\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tfor(var i=0;i<imageArray.length;i++){\n\n\t\t\t\t\t\/\/ Preload the image\n\t\t\t\t\tjQuery('<img \/>')[0].src = imageArray[i].url;\n\n\t\t\t\t\t\/\/ Get the Item\n\t\t\t\t\tvar idOrClassName = ((imageArray[i].id)?imageArray[i].id:imageArray[i].class)\n\t\t\t\t\tvar thisItem = this.getItem(idOrClassName);\n\n\n\t\t\t\t\tif(thisItem && thisItem.element){\n\n\t\t\t\t\t\t\/\/ Make sure originalImage is saved\n\t\t\t\t\t\tif(!thisItem.originalImage)\n\t\t\t\t\t\t\tthisItem.originalImage = thisItem.getImage();\n\t\t\t\t\t\t\n\t\t\t\t\t\tthisItem.hoverImage = imageArray[i].url;\n\t\t\t\t\t\tthisItem.onHoverDoActions = imageArray[i].doActions;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.addInterval = function(identifier,name){\n\t\t\t\t\/\/ Adds an interval handler `identifier` to the `_intervals`, \n\t\t\t\t\/\/returns `identifier`\n\t\t\t\t\/\/ Optional `name` can be used as a reference to the `identifier` (used by `app.clearInterval()`)\n\n\t\t\t\tname = name || identifier;\n\n\t\t\t\ttry{\n\t\t\t\t\tthis._intervals[name] = identifier;\n\t\t\t\t\treturn identifier\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.addInterval\")\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\n\t\t\tapp.addJQueryScripts = function(){\n\t\t\t\t\/\/ Adds the script tags required for jQuery to the `<head>`\n\t\t\t\t\/\/ This method is called on an `Interval` until all the scripts required have been loaded\n\t\t\t\t\/\/ Once all the script are loaded, the `Interval` is stopped \n\n\n\t\t\t\tif(app._JQUERYHARDCODED){\n\t\t\t\t\t\/\/ jQuery code is pasted in Settings, do not need to load\n\t\t\t\t\t\tapp._scriptLoaded_jquery = true;\n\t\t\t\t\t\tapp._scriptLoaded_ajaxq = true;\n\t\t\t\t\t\tapp._scriptsLoaded_arest = true;\n\t\t\t\t\t\t$.noConflict();\n\n\n\t\t\t\t}\n\t\t\t\t\/\/ check if all scripts have been loaded\n\t\t\t\tif(app._scriptLoaded_jquery && app._scriptLoaded_ajaxq){\n\t\t\t\t\tapp._scriptsLoaded_arest = true;\n\t\t\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif(app._scriptLoaded_jquery){\n\t\t\t\t\tif(!app._scriptLoading_ajaxq){\n\t\t\t\t\t\tapp._scriptLoading_ajaxq = true;\n\t\t\t\t\t\tapp.loadScript(app._ajaxqURL)\n\t\t\t\t\t}\n\t\t\t\t} else if(!app._scriptLoading_jquery){\n\t\t\t\t\tapp._scriptLoading_jquery = true;\n\t\t\t\t\tapp.loadScript(app._jqueryURL)\n\t\t\t\t} \n\n\t\t\t\t\/\/ test for jQuery and ajaxq\n\t\t\t\ttry{\n\n\t\t\t\t\tif(!app._scriptLoaded_jquery && app._scriptLoading_jquery && jQuery){\n\t\t\t\t\t\t$.noConflict();\n\t\t\t\t\t\tapp._scriptLoaded_jquery = true;\n\t\t\t\t\t}\n\t\t\t\t\tif(!app._scriptLoaded_ajaxq && app._scriptLoading_ajaxq && jQuery.ajaxq)\n\t\t\t\t\t\tapp._scriptLoaded_ajaxq = true;\n\n\t\t\t\t}catch(er){}\n\n\n\t\t\t\tsetTimeout(function(){app.addJQueryScripts()},300);\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.addScreenClickHandlers = function(id,el){\n\t\t\t\t\/\/ adds the event handlers to the `Screen` to capture `click` events\n\n\t\t\t\tif(el)\n\t\t\t\t\tapp._screen_el = el;\n\n\t\t\t\tif(app._screen_el){\n\t\t\t\t\tapp._screen_el.getElements('.item').removeEvent('click', app.onItemClicked);\n\t\t\t\t\tapp._screen_el.getElements('.item').addEvent('click', app.onItemClicked);\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\n\n\n\t\t\tapp.addScreenEvent = function(id,func){\n\t\t\t\t\/\/ The given `func` will be called whenever the screen `id` is shown. \n\t\t\t\t\/\/ `id` can be the `Screen.id` or the `Screen ClassName`\n\t\t\t\t\/\/ This function returns an `identifier`. \n\t\t\t\t\/\/ Within `func`, `this` will refer to the `Element` of the `Screen` that is shown. \n\t\t\t\t\/\/ There is one parameter `app`.\n\t\t\t\t\/\/ Example:\n\t\t\t\t\/*\n\t\t\t\t```\n\t\t\t\tapp.addScreenEvent(17078, function() {\n\t\t\t\t    app.getScreen(this).setBackgroundColor(\"Blue\")\n\t\t\t\t});\n\t\t\t\t```\n\t\t\t\t*\/\n\n\n\t\t\t\tvar f=function(eid,screen){\n\t\t\t\t\n\t\t\t\t\t\/\/ If a Class Name passed in, test for that and get the id\n\t\t\t\t\tif(isNaN(id) && screen.classList.contains(id))\n\t\t\t\t\t\tid = app.getIdFromDOMId(screen.id);\n\n\n\t\t\t\t\tif(id==eid){\n\t\t\t\t\t\tappbuilder.app.debug(\"api\",\"screenEvent\",id);\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tfunc.call(screen,this)\n\t\t\t\t\t\t}catch(e){\n\t\t\t\t\t\t\tappbuilder.app.debug(\"api\",\"Error with custom js on screen event\",e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.bind(this);\n\t\t\t\t\n\t\t\t\treturn this.phone.addEvent(\"screen\",f)\n\n\t\t\t}\n\n\n\n\n\n\n\n\n\n\n\t\t\tapp.addScript = function(code){\n\t\t\t\t\/\/ Loads the JavaScript content `script` into the page\n\t\t\t\t\/\/ If `script` holds  a url, passes this to `app.loadScript()`\n\n\n\t\t\t\tif(code.match(\/^http\/))\n\t\t\t\t\treturn app.loadScript(script)\n\n\n\t\t\t\tvar script= document.createElement('script');\n\n\t\t\t\tscript.type= 'text\/javascript';\n\t\t\t\tscript.innerHTML = code;\n\t\t\t\treturn jQuery('body').prepend(script);\t\t\t\t\t\t\t\t\t\n\n\t\t\t}\n\n\n\n\n\n\t\t\tapp.addStyles = function(styleDescriptor){\n\t\t\t\t\/\/ add `styleDescriptor` CSS styles to the document head\n\t\t\t\t\/\/ Returns the result of DOM method `appendChild()`\n\n\t\t\t\tvar head= document.getElementsByTagName('head')[0];\n\t\t\t\tvar tag = document.createElement('style');\n\n\n\t\t\t\ttag.innerHTML = styleDescriptor;\n\t\t\t\treturn head.appendChild(tag);\t\n\n\t\t\t}\n\n\n\n\t\t\tapp.addTabEvent = function(id,func){\n\t\t\t\t\/\/ The given `func` will be called whenever the Tab `id` is shown. \n\t\t\t\t\/\/ `id` can be the `Tab.id` or the `Tab ClassName`\n\t\t\t\t\/\/ The given `func` will be called whenever the Tab `id` is shown. \n\t\t\t\t\/\/ This function returns an `identifier`. \n\t\t\t\t\/\/ Within `func`, `this` will refer to the `Element` of the `Tab` that is shown. \n\t\t\t\t\/\/ There is one parameter `app`.\n\n\t\t\t\tvar f=function(eid,tab){\n\n\t\t\t\t\t\/\/ If a Class Name passed in, test for that and get the id\n\t\t\t\t\tif(isNaN(id) && tab.classList.contains(id))\n\t\t\t\t\t\tid = app.getIdFromDOMId(tab.id);\n\n\t\t\t\t\tif(id==eid){\n\t\t\t\t\t\tappbuilder.app.debug(\"api\",\"tabEvent\",id);\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\/\/func.call(tab,this)\n\t\t\t\t\t\t\t\/\/ Call func after timeout to give time for DOM to load new Screen \n\t\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\t\tfunc.call(tab,app)\n\t\t\t\t\t\t\t},10)\n\t\t\t\t\t\t}catch(e){\n\t\t\t\t\t\t\tappbuilder.app.debug(\"api\",\"Error with custom js on tab event\",e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.bind(this);\n\t\t\t\t\n\t\t\t\treturn this.phone.addEvent(\"tab\",f),f\n\t\t\t}\n\n\n\t\t\tapp.addVariableEvent_xxx = function(id, func){\n\t\t\t\t\/\/ The given `func` will be called whenever the `Variable` `id` is changed. \n\t\t\t\t\/\/ This function returns an `identifier`. \n\t\t\t\t\/\/ Within `func`, `this` will refer to the `Element` of the `Tab` that is shown. \n\t\t\t\t\/\/ There are two parameters: `val` and `app`.\n\n\t\t\/*\n\t\t```\n\t\tapp.addVariableEvent('textbox', function(val) {\n\t\t    var t = document.getElement('#screen17078 .title span');\n\t\t    if(t) {\n\t\t        t.set('text', val);\n\t\t    }\n\t\t});\n\t\t```\n\t\t*\/\n\n\t\t\t}\n\n\n\n\n\t\t\t\/\/Override method for alert\n\t\t\tappbuilder.app.alert = function(message, context) {\n\n\t\t\t\t\/\/ don't show system alerts\n\t\t\t\tif(app.disableSystemAlerts){\n\t\t\t\t\tif(message == \"Downloading updates to app\" || message == \"App is now available offline\")\n\t\t\t\t\t\treturn;\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tif(appbuilder.app.isPhoneGap) {\n\t\t\t\t\tnavigator.notification.alert(message);\n\t\t\t\t}\n\t\t\t\telse if(appbuilder.app.isMobile) {\n\t\t\t\t\talert(message);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tappbuilder.app.makeConfirm(message, null, null, null, false).inject(document.id(context || document.getElement('.phone-inner') || document.getElement('.phone') || document.body));\n\t\t\t\t}\n\t\t\t};\n\n\n\n\n\n\t\t\tapp.alertPinValue = function(idOrProps,pin,format){\n\t\t\t\t\/\/ Shows a screen alert message with the value of the pin for the device `idOrProps`.\n\t\t\t\t\/\/ Optional `format` can be `a` (for analog) or `d` (for digital) value (Default: `d`)\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tvar props = this.idOrPropsToObject(idOrProps);\n\t\t\t\tthis.getDevice(props).alertPinValue(pin,format);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.analogRead = function(pin,callback,idOrProps){\n\t\t\t\t\/\/ v1.3.6 changing the order of the arguments, was: idOrProps,pin,callback \n\t\t\t\t\/\/ Read the analog state of `pin` for the device `idOrProps`\n\t\t\t\t\/\/ Optional `callback(data)` function is called passing the `data` of the Response\n\t\t\t\t\/\/ Returns `this`\n\t\t\t\t\n\t\t\t\tvar props = this.idOrPropsToObject(idOrProps);\n\t\t\t\tthis.getDevice(props).analogRead(pin, callback)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.analogWrite = function(pin,value,idOrProps){\n\t\t\t\t\/\/ v1.3.6 changing the order of the arguments, was: idOrProps,pin,value \n\t\t\t\t\/\/ Write the PWM `value` to `pin` for the device `idOrProps`\n\t\t\t\t\/\/ `value` is in the range 0-255 (Uno) and 0-1023 (ESP8266)\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tvar props = this.idOrPropsToObject(idOrProps);\n\t\t\t\tthis.getDevice(props).analogWrite(pin, value)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\n\t\t\tapp.appendToVariable = function(variable,value,atFront){\n\t\t\t\t\/\/ appends `value` to `variable`\n\t\t\t\t\/\/ Optionally if `atFront` is `true` adds the `value` to the front of the `variable`\n\n\t\t\t\ttry{\n\n\t\t\t\t\tif(atFront)\n\t\t\t\t\t\treturn this.setVariable(variable,value+this.getVariable(variable))\n\t\t\t\t\telse\n\t\t\t\t\t\treturn this.setVariable(variable,this.getVariable(variable)+value)\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.getItem(\"+id+\")\")\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\t\t\tapp.applyScrollRules = function(el){\n\t\t\t\t\/\/ Applies scroll rules to the current screen (based on classList)\n\t\t\t\t\/\/ This must only happen once for each screen load\n\t\t\t\tif(app._currentScreen != app._lastScrollRulesScreen){\n\t\t\t\t\tapp._lastScrollRulesScreen = app._currentScreen;\n\n\t\t\t\t\tif(el.classList.contains('scroll-disabled') ||\n\t\t\t\t\t\t(app.isMobile && el.classList.contains('mobile-scroll-disabled') )\n\t\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tel.getElementsByClassName('items')[0].retrieve('scroll').disable();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t \n\n\t\t \tapp.applyStyles = function(idOrSlug){\n\t\t\t\t\/\/ Applies the styles from another app with `idOrSlug` to this app\n\t\t\t\t\/\/ The other app must be published.\n\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\tif(!idOrSlug)\n\t\t\t\t\treturn this;\n\n\t\t\t\tif(String(idOrSlug).toLowerCase() == \"greyrivets\"){\n\t\t\t\t\tapp.addStyles(\".button{color: Black;}.item.button,.item.plain,.item.text,.item.textbox,.item.thumb{background-color:rgba(0,0,0,.3);margin:10px}.width50{float:left;width:45%}.clearboth{clear:both}.flush{margin:0}.item.image{text-align:center;background-color:#000}.transparent.item.image{background:0 0}.button{color:#000}.app,.item-icon-inner .title,button{color:#fff}.screen.list .items{background-image:url(https:\/\/d1yeqpqwjn2qg3.cloudfront.net\/WWwugf2Zecrqc26VaJZvPT8pd4k=\/fit-in\/640x960\/http:\/\/appshed-id-images.s3-website-eu-west-1.amazonaws.com\/4047619);background-repeat:no-repeat;background-position:center center;background-size:cover;background-color:#303030}.item{border-bottom-color:#424242}\");\n\t\t\t\t\treturn this;\t\t\t\n\t\t\t\t}\n\n\n\t\t\t\t\/\/ check if appData loaded\n\t\t\t\tif(app._appData[idOrSlug]){\n\n\t\t\t\t\t\/\/ if already added, return\n\t\t\t\t\tif(app._appData[idOrSlug].stylesAdded)\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\/\/ get the styles from splashhtml\n\t\t\t\t\tvar css = app._appData[idOrSlug]['html'].replace(\/<style scoped>([\\s\\S]*)<\\\/style>[\\s\\S]*\/,\"$1\")\n\t\t\t\t\t\/\/ remove #app1234 from the css\n\t\t\t\t\tcss = css.replace(\/#app\\d+\/g,\"#app\"+app.id); \/\/\n\t\t\t\t\tapp.addStyles(css);\n\n\t\t\t\t\t\/\/ mark this as added\n\t\t\t\t\tapp._appData[idOrSlug].stylesAdded = true;\n\n\t\t\t\t\tapp.hideLoader();\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\t\/\/ If the appData hasn't been loaded, load now\n\t\t\t\tapp.showLoader();\n\n\t\t\t\tapp.loadAppData(idOrSlug,function(idOrSlug){\n\t\t\t\t\t\/\/ call this same function once loaded to put the styles on the page\n\t\t\t\t\tapp.applyStyles(idOrSlug);\n\t\t\t\t});\n\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.autoConnectDevices = function(){\n\t\t\t\t\/\/ Automatically connects to available devices. \n\t\t\t\t\/\/ The first available device becomes the defaultDevice\n\n\n\t\t\t\t\/\/ if the time has come to autoconnect...\n\t\t\t\tif(Date.now() >= app._autoConnectTimestamp + app._autoConnectInterval){\n\t\t\t\t\tapp._autoConnectTimestamp = Date.now();\n\n\t\t\t\t\tif(!app._autoConnectGotLocal){\n\t\t\t\t\t\tapp.getDevice(); \/\/ try get the local device\n\t\t\t\t\t\tapp._autoConnectGotLocal = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor(var i in app._devices){\n\t\t\t\t\t\tvar d = app._devices[i];\n\t\t\t\t\t\td.getInfo(function(a,textStatus,b){\n\n\t\t\t\t\t\t\t\/\/ jQuery really messed up the arguments to .always...\n\t\t\t\t\t\t\tvar data,jqXHR, errorThrown; \n\t\t\t\t\t\t    if (a.statusCode) { \/\/ this happens when fail\n\t\t\t\t\t\t    \tjqXHR = a; \n\t\t\t\t\t\t    \terrorThrown = b; \n\t\t\t\t\t\t    }else{ \/\/ success\n\t\t\t\t\t\t    \tdata = a;\n\t\t\t\t\t\t    \tjqXHR = b; \n\n\t\t\t\t\t\t\t\t\/\/ if multiple devices connect, the last one will become the default device.\n\t\t\t\t\t\t\t\tif(data.id && data.id > \"\"){\n\t\t\t\t\t\t\t\t\tif(data.connected)\n\t\t\t\t\t\t\t\t\t\tapp._defaultDevice = data.id;\n\t\t\t\t\t\t\t\t\telse if(app._defaultDevice == data.id)\n\t\t\t\t\t\t\t\t\t\tapp._defaultDevice = \"\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\/\/ run again if required\n\t\t\t\tif(app._autoConnectDevices)\n\t\t\t\t\tsetTimeout(app.autoConnectDevices,app._autoConnectInterval);\n\n\t\t\t}\n\n\n\n\t\t\tapp.blinkAllDevices = function(number,duration,noBgChange){\n\t\t\t\t\/\/ Blink all connected devices  \n\t\t\t\t\/\/ The parameters `number`,`duration`,`noBgChange` are passed through to `Device.blink()`\n\t\t\t\t\/\/ Return `this`\n\n\t\t\t\tfor(var k in this._devices){\n\t\t\t\t\tthis._devices[k].blink(number,duration,noBgChange);\t\t\t\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\t\t\tapp.callFunction = function(deviceId, called_function, parameters, callback) {\n\t\t\t\t\/\/ Calls the specified `called_function` on the device`deviceId` sending `parameters` and calling `callback` on the return.\n\t\t\t\t\/\/ [Optional] `deviceId` defaults to `app._defaultDevice`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tvar device = this.getDevice(deviceId?deviceId:this._defaultDevice);\n\t\t\t\tdevice.callFunction(called_function, parameters, callback);\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\t\t\tapp.clearDevices = function(){\n\t\t\t\t\/\/ Clears all `Devices` that have been connected\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tthis._devices = {};\n\t\t\t\tthis._defaultDevice = null;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tapp.clearInterval = function(identifierOrName){\n\t\t\t\t\/\/ Clears the interval identified by `identifierOrName`\n\t\t\t\t\/\/ Optional `identifierOrName` can be the `identifier` of the interval, or a `name` supplied by `app.setInterval()`\n\t\t\t\t\/\/ If no  `identifierOrName` then all Intervals are cleared\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\ttry{\n\t\t\t\t\t\/\/ if no identifierOrName, clear all Intervals\n\t\t\t\t\tif(identifierOrName){\n\t\t\t\t\t\t\/\/ try clear the interval using both forms\n\t\t\t\t\t\twindow.clearInterval(identifierOrName)\n\t\t\t\t\t\twindow.clearInterval(this._intervals[identifierOrName])\n\n\t\t\t\t\t\t\/\/ Delete the property from _intervals\n\t\t\t\t\t\tdelete this._intervals[identifierOrName];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar keys = Object.keys(this._intervals);\n\t\t\t\t\t\tfor(var i=0;i<keys.length;i++){\n\t\t\t\t\t\t\twindow.clearInterval(this._intervals[keys[i]]);\n\n\t\t\t\t\t\t\t\/\/ Delete the property from _intervals\n\t\t\t\t\t\t\tdelete this._intervals[keys[i]];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.clearInterval()\")\t\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\t\t\tapp.deviceMotionHandler = function(eventData) {\n\t\t\t\tif(navigator && navigator.accelerometer){\n\t\t\t\t\t\/\/ this is Cordova\n\t\t\t\t\tapp.deviceMotionEvent = eventData;\n\t\t\t\t}else{\n\t\t\t\t\tapp.deviceMotionEvent = eventData.accelerationIncludingGravity;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\t\t\tapp.devicesToString = function(){\n\t\t\t\t\/\/ Returns a string represenation of all the connected `devices`\n\t\t\t\t\/\/ Default layout is: id - local_ip\n\n\t\t\t\tvar rVal = \"\";\n\t\t\t\tfor(var k in this._devices)\n\t\t\t\t\trVal += this._devices[k].id + \" - \" + this._devices[k].variables.local_ip + \"\\n\";\n\n\t\t\t\treturn rVal;\n\t\t\t}\n\n\n\n\t\t\tapp.digitalRead = function(pin,callback,idOrProps){\n\t\t\t\t\/\/ v1.3.6 changing the order of the arguments, was: idOrProps,pin,callback \n\t\t\t\t\/\/ Read the digital state of `pin` for the device `idOrProps`\n\t\t\t\t\/\/ Optional `callback(data)` function is called passing the `data` of the Response\n\t\t\t\t\/\/ Returns `this`\n\t\t\t\t\n\t\t\t\tvar props = this.idOrPropsToObject(idOrProps);\n\t\t\t\tthis.getDevice(props).digitalRead(pin, callback)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.digitalWrite = function(pin,value,idOrProps){\n\t\t\t\t\/\/ v1.3.6 changing the order of the arguments, was: idOrProps,pin,value \n\t\t\t\t\/\/ Write the digital `value` to `pin` for the device `idOrProps`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tvar props = this.idOrPropsToObject(idOrProps);\n\t\t\t\tthis.getDevice(props).digitalWrite(pin, value)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.disableScroll = function(){\n\t\t\t\tapp.getScreen().disableScroll();\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.doImports = function(){\n\t\t\t\t\/\/ Import required libraries\n\t\t\t\t\/\/ The libraries are listed in the App Description: \n\t\t\t\t\/\/   Add a line(s) starting with the keyword `import` followed by a list of libraries to import \n\t\t\t\t\/\/   Additional libraries can be on the same line (space or comma delimited) or on a new line with the `import` keyword\n\t\t\t\t\/\/   e.g. `import libdemo`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\/\/ Requires jQuery and ajaxq\n\t\t\t\t\/\/ Load the libraries using ajaxq to allow for dependencies on previous libraries\n\n\n\t\t\t\t\/\/ if jquery not ready, wait and call again\n\t\t\t\tif(!app._scriptLoaded_jquery || !app._scriptLoaded_ajaxq){\n\t\t\t\t\tsetTimeout(function(){app.doImports()},500)\n\t\t\t\t\treturn this;\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tvar libraries = app.getLibraries();\n\n\t\t\t\tfor(var i=0;i<libraries.length;i++){\n\t\t\t\t\tapp.import(libraries[i]);\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\tapp._importsDone = true;\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\n\t\t\tapp.doThemes = function(){\n\t\t\t\t\/\/ Apply required themes\n\t\t\t\t\/\/ The themes are listed in the App Description: \n\t\t\t\t\/\/   Add a line(s) starting with the keyword `theme` followed by the theme name \n\t\t\t\t\/\/   Additional themes can be on the same line (space or comma delimited) or on a new line with the `theme` keyword\n\t\t\t\t\/\/   e.g. `theme urban`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tvar themes = app.getThemes();\n\n\t\t\t\tfor(var i=0;i<themes.length;i++)\n\t\t\t\t\tapp.applyStyles(themes[i]);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.enableScroll = function(){\n\t\t\t\tapp.getScreen().enableScroll();\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.findClass = function(element, className) { \n\t\t\t\t\/\/ Returns the first `DOM Element` matching  `className`\n\t\t\t\treturn element.querySelector(\".\" + className) \n\t\t\t}\n\n\n\n\t\t\tapp.findLocalDevices = function(address){\n\t\t\t\t\/\/ Finds devices on the same LAN\n\t\t\t\t\/\/ The devices are \"linked\" to the app - stored in `app._devices`\n\t\t\t\t\/\/ Optional `address` is the local IP address of the app.\n\t\t\t\t\/\/ If `address` is ommitted the app will try to determine it's own Local IP (must be online to do this)\n\t\t\t\t\/\/ The first device found will be made the default device\n\n\n\t\t\t\t\/\/ iPhone Personal Hotspot Tethering IP range... 172.20.10.1-172.20.10.3\n\t\t\t\t\/\/ Android Hotspot IP 192.168.42.x\n\n\t\t\t  try{\n\n\t\t\t  \tif(!address || address == \"\"){\n\t\t\t  \t\t\/\/ try get the local address, then re-call this method \n\t\t\t  \t\tthis.getLocalIP(function(ip_addr){\n\t\t\t  \t\t\tapp.findLocalDevices(ip_addr);\n\t\t\t  \t\t})\n\t\t\t  \t} else{\n\n\n\t\t\t\t\t\/\/ Scan the local subnet of `address` looking for devices\n\n\t\t\t\t\tvar ipParts = String(address).split(\".\")\n\t\t\t\t\tvar ipPartial = ipParts[0]+\".\"+ipParts[1]+\".\"+ipParts[2]+\".\"\n\n\t\t\t\t\t\/\/ go through all IP addresses changing the last number only\n\t\t\t\t\tfor(var i=0;i<255;i++){\n\t\t\t\t\t\tvar ipAddress = ipPartial+i\n\t\t\t\t\t\tvar thisURL = 'http:\/\/'+ipAddress;\n\t\t\t\t\t\tvar response;\n\t\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\t\turl: thisURL + '\/info',\n\t\t\t\t\t\t\tipAddress: ipAddress,\n\t\t\t\t\t\t\tcrossDomain: true,\n\t\t\t\t\t\t\ttimeout: app._scanIPTimeout\n\t\t\t\t\t\t}).done(function(data) {\n\t\t\t\t\t\t\t\/\/ inspect the `data` sent to determine if it is a valid device\n\t\t\t\t\t\t\t\/\/ Expect to find `name` and `id` in the `data` object\n\t\t\t\t\t\t\tif(data && data.id && data.name){\n\t\t\t\t\t\t\t\t\/\/ get the device, passing the properties\n\t\t\t\t\t\t\t\t\/\/ The local_ip is valid, so indicate this in props\n\t\t\t\t\t\t\t\tvar props = {id: data.id, name: data.name, hardware: data.hardware, connected: data.connected, local_ip: this.ipAddress, isValidLocalIP: true}\n\t\t\t\t\t\t\t\tvar device = app.getDevice(props);\n\t\t\t\t\t\t\t\tdevice.info = data;\n\n\t\t\t\t\t\t\t\t\/\/ If IOIO stil the default, or no default, make this device default\n\t\t\t\t\t\t\t\tif(!app._defaultDevice || app._defaultDevice == \"\" || app._defaultDevice == \"IOIO\")\n\t\t\t\t\t\t\t\t\tapp._defaultDevice = data.id;\n\n\t\t\t\t\t\t\t\t\/\/ Some devices (Arduino) sometimes do not return variables - due to requests in rapid succession. \n\t\t\t\t\t\t\t\t\/\/ Do getInfo() to retry\n\t\t\t\t\t\t\t\tif(!data.variables || !data.variables.local_ip)\n\t\t\t\t\t\t\t\t\tdevice.getInfo();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t  }catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.findLocalDevices()\")\t\n\t\t\t  }\n\n\t\t\t  return this;\n\t\t\t}\n\n\n\n\t\t\tapp.findParentItem = function(element){\n\t\t\t\t\/\/ Returns the `Item` containing the DOM `element`\n\t\t\t\t\/\/ This traverses up each `parentElement` \n\t\t\t\t\/\/ If it finds an `Item` it returns the `Item` object\n\t\t\t\t\n\t\t\t\ttry{\n\t\t\t\t\tif(element && element.classList){\n\t\t\t\t\t\tif(element.classList.contains(\"item\"))\n\t\t\t\t\t\t\treturn app.getItem(element.id)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ if we reach the 'screen' element, return \n\t\t\t\t\t\tif(element.classList.contains(\"screen\"))\n\t\t\t\t\t\t\treturn null;\t\t\t\t\n\n\t\t\t\t\t\t\/\/ call this method on the parent\n\t\t\t\t\t\treturn app.findParentItem(element.parentElement)\n\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.findParentItem()\")\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\n\n\n\t\t\tapp.getData = function(idOrClassName){\n\t\t\t\t\/\/ returns the Data object for `idOrClassName'\n\n\t\t\t\treturn this.getScreen(idOrClassName).getData()\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.getDevice = function(idOrProps,key){\n\t\t\t\t\/\/ Returns the device for `idOrProps`\n\t\t\t\t\/\/ `idOrProps` can be a `deviceId` (a ten character string) \n\t\t\t\t\/\/ or an object in the form\n\t\t\t\t\/\/ * {id: xxx, [local_ip: xxx, layoutId: xxx]}\n\t\t\t\t\/\/ If no `idOrProps` passed in, the default device is returned\n\t\t\t\t\/\/ Optionl `key` is the aREST Pro key \n\n\t\t\t\tvar idOrProps = idOrProps || this._defaultDevice;\n\t\t\t\tvar props = app.idOrPropsToObject(idOrProps);\n\n\t\t\t\t\/\/ special case local - if device is running softAP (local Access Point)\n\t\t\t\t\/\/ If no id, and no _defaultDevice, default to `local`\n\t\t\t\tif(!props.id || props.id == \"\"){\n\t\t\t\t\tprops.id = \"local\";\n\t\t\t\t\tthis._defaultDevice = \"local\";\n\t\t\t\t}\n\n\n\t\t\t\tif(key && key > \"\")\n\t\t\t\t\tprops.key = key;\n\n\t\t\t\tvar device = app._devices[String(props.id).trim()]\n\n\n\t\t\t\tif(device){\n\t\t\t\t\t\/\/ don't update properties if only id passed in (1 key)\n\t\t\t\t\tif(Object.keys(props).length > 1)\n\t\t\t\t\t\tdevice.updateProperties(props)\n\t\t\t\t} else {\n\t\t\t\t\tdevice = app.addDevice(props)\n\t\t\t\t}\n\n\t\t\t\t\/\/ if no default, make this the default\n\t\t\t\tif(!this._defaultDevice)\n\t\t\t\t\tthis._defaultDevice = props.id; \n\n\t\t\t\treturn device\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.getIdFromDOMId = function(domId){\n\t\t\t\treturn parseInt(String(domId).replace(\/[a-z]\/g,\"\"))\n\t\t\t}\n\n\n\n\t\t\tapp.getIPs = function(callback){\n\t\t\t\t\/\/ Looks for the Local IP address(es) for the app\n\t\t\t\t\/\/ Calls `callback(ip_addr)` for each IP Address\n\t\t\t\t\/\/ Adds all the IP Addresses to `app._appIPAddresses[]`\n\n\t\t\t\tapp._appIPAddresses = [];\n\n\t\t\t    var ip_dups = {};\n\n\t\t\t    \/\/compatibility for firefox and chrome\n\t\t\t    var RTCPeerConnection = window.RTCPeerConnection\n\t\t\t        || window.mozRTCPeerConnection\n\t\t\t        || window.webkitRTCPeerConnection;\n\t\t\t    var useWebKit = !!window.webkitRTCPeerConnection;\n\n\t\t\t    \/\/bypass naive webrtc blocking using an iframe\n\t\t\t    if(!RTCPeerConnection){\n\t\t\t        \/\/NOTE: you need to have an iframe in the page right above the script tag\n\t\t\t        \/\/\n\t\t\t        \/\/<iframe id=\"iframe\" sandbox=\"allow-same-origin\" style=\"display: none\"><\/iframe>\n\t\t\t        \/\/<screenipt>...getIPs called in here...\n\t\t\t        \n\t\t\t        var win = iframe.contentWindow;\n\t\t\t        RTCPeerConnection = win.RTCPeerConnection\n\t\t\t            || win.mozRTCPeerConnection\n\t\t\t            || win.webkitRTCPeerConnection;\n\t\t\t        useWebKit = !!win.webkitRTCPeerConnection;\n\t\t\t    }\n\n\t\t\t    \/\/minimal requirements for data connection\n\t\t\t    var mediaConstraints = {\n\t\t\t        optional: [{RtpDataChannels: true}]\n\t\t\t    };\n\n\t\t\t    var servers = {iceServers: [{urls: \"stun:stun.services.mozilla.com\"}]};\n\n\t\t\t    \/\/construct a new RTCPeerConnection\n\t\t\t    var pc = new RTCPeerConnection(servers, mediaConstraints);\n\n\t\t\t    function handleCandidate(candidate){\n\t\t\t        \/\/match just the IP address\n\t\t\t        var ip_regex = \/([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})\/\n\t\t\t        var ip_addr = ip_regex.exec(candidate)[1];\n\n\t\t\t        \/\/remove duplicates\n\t\t\t        if(ip_dups[ip_addr] === undefined){\n\t\t\t            app._appIPAddresses.push(ip_addr)\n\t\t\t\t        if(callback != null) callback(ip_addr);\n\t\t\t        }\n\n\n\t\t\t        ip_dups[ip_addr] = true;\n\t\t\t    }\n\n\t\t\t    \/\/listen for candidate events\n\t\t\t    pc.onicecandidate = function(ice){\n\n\t\t\t        \/\/skip non-candidate events\n\t\t\t        if(ice.candidate)\n\t\t\t            handleCandidate(ice.candidate.candidate);\n\t\t\t    };\n\n\t\t\t    \/\/create a bogus data channel\n\t\t\t    pc.createDataChannel(\"\");\n\n\t\t\t    \/\/create an offer sdp\n\t\t\t    pc.createOffer(function(result){\n\n\t\t\t        \/\/trigger the stun server request\n\t\t\t        pc.setLocalDescription(result, function(){}, function(){});\n\n\t\t\t    }, function(){});\n\n\t\t\t    \/\/wait for a while to let everything done\n\t\t\t    setTimeout(function(){\n\t\t\t      try{\t\t      \t\n\t\t\t        \/\/read candidate info from local description\n\t\t\t        var lines = pc.localDescription.sdp.split('\\n');\n\n\t\t\t        lines.forEach(function(line){\n\t\t\t            if(line.indexOf('a=candidate:') === 0)\n\t\t\t                handleCandidate(line);\n\t\t\t        });\n\t\t\t      }catch(er){}\n\n\t\t\t        callback()\n\t\t\t    }, 1000);\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.getItem = function(idOrClassName,element){\n\t\t\t\t\/\/ Returns an `Item` object for `idOrClassName`\n\t\t\t\t\/\/ If no `idOrClassName` supplied it returns the `Current Item` (last item clicked)\n\t\t\t\t\/\/ `idOrClassName` can be the `ItemId` or the `ClassName` set in `Custom Classes`, or the DOM id of the item\n\t\t\t\t\/\/ If multiple items have the same `ClassName`, the first item is returned\n\t\t\t\t\/\/ Optional `element` is assinged to the `Item.element` property\n\n\t\t\t\tif(!idOrClassName && this._currentItemId)\n\t\t\t\t\tidOrClassName = this._currentItemId;\n\n\t\t\t\tvar testId = this.getIdFromDOMId(idOrClassName)\n\n\t\t\t\ttry{\n\n\t\t\t\t\tif(this._items[testId]){\n\t\t\t\t\t\t\/\/ MUST reload the `element` otherwise it references old stuff\n\t\t\t\t\t\tthis._items[testId].element = document.getElementById(this._items[testId].domId)\n\t\t\t\t\t\treturn this._items[testId];\n\t\t\t\t\t}\n\n\t\t\t\t\tvar item = new this.Item(testId)\n\n\t\t\t\t\tif(element)\n\t\t\t\t\t\titem.element = element;\n\n\t\t\t\t\t\/\/ if no element, try getting the item by ClassName\n\t\t\t\t\tif(item.element == null)\n\t\t\t\t\t\titem = this.getItemByClassName(idOrClassName)\n\n\t\t\t\t\t\/\/ If still no element, there is no item\n\t\t\t\t\tif(!item || item.element == null){\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tthis._items[item.id] = item;\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t}\n\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tthis.handleError(er,\"app.getItem(\"+idOrClassName+\")\")\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\n\n\t\t\tapp.getItemHTML = function(id,type,data){\n\t\t\t\t\/\/ returns the default HTML for an item\n\n\t\t\t\tswitch (type)\n\t\t\t\t{\n\t\t\t\t\tcase \"icon\": \n\t\t\t\t\t\treturn '<td class=\" item icon\" id=\"item'+id+'\"><div class=\"item-icon-inner\"><img class=\"image\" src=\"' + ( (data && data.image ) ? data.image : 'https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/images\/defaultjpg.jpg') + '\" width=\"50\" height=\"50\"><div class=\"title\">An Icon<\/div><\/div><\/td>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t   \n\t\t\t\t   default: \n\t\t\t\t   \t\treturn '<div class=\" item thumb\" id=\"item1\"><div class=\"image-container\"><img class=\"image\" src=\"https:\/\/s3-eu-west-1.amazonaws.com\/staticmedia.appshed.com\/images\/defaultjpg.jpg\" width=\"50\" height=\"50\"><\/div><div class=\"title\">A text &amp; image item<\/div><div class=\"text\">A subtitle for this item<\/div><\/div>';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tapp.getItemByClassName = function(name){\n\t\t\t\t\/\/ Returns an `Item` matching `name`\n\n\t\t\t\tvar elements = document.getElementsByClassName(name);\n\n\t\t\t\tif(elements && elements.length && elements[0].id.match(\/item\/))\n\t\t\t\t\treturn this.getItemByDomId(elements[0].id)\n\n\t\t\t}\n\n\n\t\t\tapp.getItemByDomId = function(domId,element){\n\t\t\t\t\/\/ Returns an `Item` object for `domId` which is the `id` of the `Element` in the `DOM Tree`\n\t\t\t\t\/\/ Optional `element` is the `DOM Element`\n\n\t\t\t\treturn app.getItem(parseInt(String(domId).replace(\/[a-z]\/g,\"\")),element)\n\n\t\t\t}\n\n\n\t\t\tapp.getItemsElement = function(){\n\t\t\t\treturn document.getElementsByClassName('items')[0]\n\t\t\t}\n\n\n\t\t\tapp.getJSON = function(appIdOrSlug){\n\t\t\t\t\/\/ returns a JSON object \n\n\t\t\t}\n\n\n\t\t\tapp.getLibraries = function(){\n\t\t\t\t\/\/ Returns an array of libraries that are required for this app\n\n\t\t\t\tvar libs = [];\n\n\n\t\t\t\tvar matches = app.description.match(\/\\nimport.*\/gi);\n\n\t\t\t\tif(matches && matches.length){\n\t\t\t\t\tfor(var i=0;i<matches.length;i++){\n\t\t\t\t\t\tlibs = libs.concat(matches[i].replace(\/\\nimport *\/i,\"\").replace(\/ \/g,\",\").replace(\/,+\/g,\",\").split(\",\")); \/\/\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn libs;\n\n\n\t\t\t}\n\n\n\n\t\t\tapp.getLocalIP = function(callback){\n\t\t\t\t\/\/ Searches for the Local IP Address for the app\n\t\t\t\t\/\/ IP addresses starting with 10. and 192. are treated as local\n\t\t\t\t\/\/ `callback(ip_addr)` is called if a local IP is found.\n\t\t\t\t\/\/ The app needs internet connectivity to do this.\n\n\t\t\t\tthis.getIPs(function(ip_addr){\n\t\t\t\t\tif(String(ip_addr).match(\/^10\\.\/) || String(ip_addr).match(\/^192\\.\/)){\n\t\t\t\t\t\tif(callback != null) callback(ip_addr);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\tapp.getPinValue = function(pinNameOrNumber,id){\n\n\t\t\t\t\/\/ Returns the value for pin `pinNameOrNumber` \n\t\t\t\t\/\/ Optional `id` to use a specific `Device`\n\t\t\t\t\/\/ If no `id` passed in the default `Device` is used (`IOIO` is the initial default device)\n\n\n\n\t\t\t\tvar device = this.getDevice(id?id:this._defaultDevice)\n\n\t\t\t\t\/\/ For IOIO use built in iot.setPin\n\t\t\t\tif(device.id == \"IOIO\"){\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn window.appbuilder.events.iot.getPinValue(pinName)\n\t\t\t\t\t}catch(er){this.handleError(er,\"app.getPin() IOIO error\")}\n\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ all other devices... use Device methods\n\t\t\t\t\treturn device.getPinValue(pinNameOrNumber);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\t\t\t\n\n\n\t\t\tapp.getRandomColor = function(numOfSteps, step){\n\t\t\t\t\/\/ Returns a random color in the format `rgb(x,y,z)`. \n\t\t\t\t\/\/ Optional `numOfSteps` determines how many steps to separate the color spectrum into.\n\t\t\t\t\/\/ Optional `step` specifies the specific step to return. Default is a random step.\n\n\t\t\t\tvar numOfSteps = numOfSteps || 100\n\t\t\t\tvar step = step || parseInt(Math.random()*numOfSteps)\n\n\t\t\t    \/\/ This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n\t\t\t    \/\/ Adam Cole, 2011-Sept-14\n\t\t\t    \/\/ HSV to RBG adapted from: http:\/\/mjijackson.com\/2008\/02\/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n\t\t\t    var r, g, b;\n\t\t\t    var h = step \/ numOfSteps;\n\t\t\t    var i = ~~(h * 6);\n\t\t\t    var f = h * 6 - i;\n\t\t\t    var q = 1 - f;\n\t\t\t    switch(i % 6){\n\t\t\t        case 0: r = 1; g = f; b = 0; break;\n\t\t\t        case 1: r = q; g = 1; b = 0; break;\n\t\t\t        case 2: r = 0; g = 1; b = f; break;\n\t\t\t        case 3: r = 0; g = q; b = 1; break;\n\t\t\t        case 4: r = f; g = 0; b = 1; break;\n\t\t\t        case 5: r = 1; g = 0; b = q; break;\n\t\t\t    }\n\t\t\t    var c = \"#\" + (\"00\" + (~ ~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(b * 255)).toString(16)).slice(-2);\n\t\t\t    return (c);\n\n\n\n\t\t\t}\n\n\n\n\n\n\n\t\t\tapp.getRemoteIP = function(callback){\n\t\t\t\t\/\/ Searches for the Remote IP Address for the app\n\t\t\t\t\/\/ IP addresses starting with 10. and 192. are treated as local\n\t\t\t\t\/\/ `callback(ip_addr)` is called if a remote IP is found.\n\t\t\t\t\n\t\t\t\tthis.getIPs(function(ip_addr){\n\t\t\t\t\tif(ip_addr != null && ip_addr != undefined && !String(ip_addr).match(\/^10\\.\/) && !String(ip_addr).match(\/^192\\.\/)){\n\t\t\t\t\t\tif(callback != null) callback(ip_addr);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\n\n\t\t\tapp.getScreen = function(id){\n\t\t\t\t\/\/ returns the `Screen` object for `id`\n\n\t\t\t\ttry{\n\n\n\t\t\t\t\tvar element;\n\n\t\t\t\t\tif(!id){\n\t\t\t\t\t\tid = String(document.querySelector('.screen').id).replace(\/screen\/,'')\n\t\t\t\t\t}\n\n\n\t\t\t\t\t\/\/ look in the cache for the screen\n\t\t\t\t\tif(this._screens[id]){\n\t\t\t\t\t\t\/\/ MUST reload the `element` otherwise it references old stuff\n\t\t\t\t\t\tthis._screens[id].element = document.getElementById(this._screens[id].domId)\n\t\t\t\t\t\treturn this._screens[id];\n\t\t\t\t\t}\n\n\n\n\n\t\t\t\t\t\/\/ Special Case: id is the DOM Element of the screen\n\t\t\t\t\t\/\/ then the DomID will be in the format \"screen123\"\n\t\t\t\t\t\/\/ This happens if app.addScreenEvent() passes `this` to app.getScreen()\n\t\t\t\t\tif((typeof id === \"object\" && id.id && id.id.match(\/screen\/))){\n\t\t\t\t\t\telement = id;\n\t\t\t\t\t\tid = element.id.replace(\/screen\/,'')\n\t\t\t\t\t}\n\n\n\t\t\t\t\t\/\/ look in the cache for the screen\n\t\t\t\t\tif(this._screens[id]){\n\t\t\t\t\t\t\/\/ MUST reload the `element` otherwise it references old stuff\n\t\t\t\t\t\tif(element)\n\t\t\t\t\t\t\tthis._screens[id].element = element;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthis._screens[id].element = document.getElementById(this._screens[id].domId)\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar aScreen = new app.Screen(id);\n\t\t\t\t\t\tif(element)\n\t\t\t\t\t\t\taScreen.element = element;\n\t\t\t\t\t\tthis._screens[id] = aScreen;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._screens[id];\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.getScreen(\"+id+\")\")\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\n\t\t\tapp.getThemes = function(){\n\t\t\t\t\/\/ Return an array of themes for this app\n\n\t\t\t\tvar themes = [];\n\n\n\t\t\t\tvar matches = app.description.match(\/^theme.*\/i);\nconsole.log(\"matches\",matches)\n\t\t\t\tif(matches && matches.length){\n\t\t\t\t\tfor(var i=0;i<matches.length;i++){\nconsole.log(\"i\",i,matches[i])\t\t\t\t\t\t\n\t\t\t\t\t\tthemes = themes.concat(matches[i].replace(\/^themes* *\/i,\"\").replace(\/:\/g,\"\").replace(\/ \/g,\",\").replace(\/,+\/g,\",\").split(\",\")); \/\/\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn themes;\n\n\t\t\t}\n\n\n\t\t\tapp.getVariable_xxx = function(name){\n\t\t\t\t\/\/ Returns the value of a form variable with the given `name`.\n\t\t\t\t\/\/ [NOTE: the method name is getVariable without _xxx and it already exists in the built-in JavaScript library. \n\t\t\t\t\/\/   It is included here for documentation purposes only.]\n\n\n\t\t\t}\n\n\n\n\t\t\tapp.handleError = function(er,msg){\n\t\t\t\t\/\/ Handles errors. Logs `er` and `msg` \n\n\t\t\t\tvar msg = msg || \"\"\n\t\t\t\tconsole.log(\"ERROR: \",er,msg)\n\n\t\t\t}\n\n\n\t\t\tapp.hideLoader = function(timeout){\n\t\t\t\t\/\/ Hides the loading element\n\t\t\t\t\/\/ Optional - Delay hiding until `timeout`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tif(!timeout)\n\t\t\t\t\ttimeout = 1;\n\n\t\t\t\tsetTimeout(function(){document.getElementsByClassName('loader')[0].style.display = 'none'},timeout)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.idOrPropsToObject = function(idOrProps){\n\t\t\t\t\/\/ Returns an `object` using `idOrProps`\n\n\t\t\t\tvar props = {id: null};\n\n\t\t\t\tif (idOrProps && typeof idOrProps === \"object\")\n\t\t\t\t\tprops = idOrProps;\n\t\t\t\telse if(idOrProps)\n\t\t\t\t\tprops.id = String(idOrProps).trim();\n\n\t\t\t\treturn props;\n\t\t\t}\n\n\n\n\t\t\tapp.import = function(idOrSlug){\n\t\t\t\t\/\/ Imports the required JavaScript `library` \n\t\t\t\t\/\/ The library is imported from the Custom JavaScript from another app `idOrSlug`\n\t\t\t\t\/\/ Valid values for `library` include:\n\t\t\t\t\/\/  * appcar\n\t\t\t\t\/\/ Returns `this`\n\n\n\n\t\t\t\tif(!idOrSlug)\n\t\t\t\t\treturn this;\n\n\n\t\t\t\t\/\/ check if appData loaded\n\t\t\t\tif(app._appData[idOrSlug]){\n\n\t\t\t\t\t\/\/ if already added, return\n\t\t\t\t\tif(app._appData[idOrSlug].jsAdded)\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\/\/ get the script from .javascript\n\t\t\t\t\tapp.addScript(app._appData[idOrSlug]['javascript']);\n\n\t\t\t\t\t\/\/ mark this as added\n\t\t\t\t\tapp._appData[idOrSlug].jsAdded = true;\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t\/\/ if no appData, load it and import again on callback\n\t\t\t\tapp.loadAppData(idOrSlug,function(idOrSlug){\n\t\t\t\t\tapp.import(idOrSlug);\n\t\t\t\t});\n\n\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.initAccordion = function() {\n\t\t\t\t\/\/ Initialises any accordions on the screen\n\t\t\t\t\/\/ To create an Accordion add the className `accordion` to the `Item`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\/\/ Thumb\/ Image Links\n\t\t\t\tnew Fx.Accordion(this, '.accordion.item', '.accordion.item .text', {\n\t\t\t\t\talwaysHide: true,\n\t\t\t\t\tdisplay:-1,\n\t\t\t\t\tonActive:function(t,el){\n\t\t\t\t\t\tel.getParent('.accordion.item').getElement('img').addClass('rotate');\n\t\t\t\t\t},\t\n\t\t\t\t\tonBackground:function(t,el){\n\t\t\t\t\t\tel.getParent('.accordion.item').getElement('img').removeClass('rotate');\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: function(){\n\t\t\t\t        app.refreshScroll();\n\t\t\t\t    }\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn this;\t\n\t\t\t}\n\n\n\n\n\t\t\tapp.loadAppData = function(idOrSlug,callback){\n\t\t\t\t\/\/ Loads the app data for another app `idOrslug`\n\t\t\t\t\/\/ Optional `callback` function called, passed one parameter: `idOrSlug`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\/\/ SPECIAL CASE\n\t\t\t\t\/\/ Change 'appcar' to 'libappcar'  - temporary workaround to get appcar library from another app\n\t\t\t\t\/\/ this allows the app 'appcar' to be the user facing app\n\t\t\t\tif(idOrSlug == \"appcar\")\n\t\t\t\t\tidOrSlug = 'libappcar';\n\n\n\n\t\t\t\tjQuery.ajax({\t\t\t\n\t\t\t\t\turl: \"http:\/\/cors.appshed.com\/?u=http:\/\/apps.appshed.com\/\"+idOrSlug\n\t\t\t\t}).always(function(data) {\n\t\t\t\t\tif(data.status == 200 || data.statusText == \"OK\"){\n\t\t\t\t\t\tvar appId = data.responseText.replace(\/[\\s\\S]*\"app\":(\\d+),\"request\"[\\s\\S]*\/,\"$1\"); \/\/\n\n\t\t\t\t\t\t\/\/ now get the app json\n\t\t\t\t\t\tjQuery.ajax({\t\t\t\n\t\t\t\t\t\t\turl: \"http:\/\/cors.appshed.com\/?u=http:\/\/apps.appshed.com\/\"+idOrSlug+\"\/\"+appId+\".app.js\"\n\t\t\t\t\t\t}).always(function(data) {\n\t\t\t\t\t\t\tif(data.status == 200 || data.statusText == \"OK\"){\n\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\tvar rObj = JSON.parse(data.responseText.replace(\/appbuilder\\.app\\.FileLoader\\.fetched\\(([\\s\\S]*)\\);$\/,\"$1\")); \/\/\n\t\t\t\t\t\t\t\t\tapp._appData[idOrSlug] = rObj['app'][Object.keys(rObj['app'])[0]];\n\n\t\t\t\t\t\t\t\t\tif(callback != null) callback(idOrSlug);\n\t\t\t\t\t\t\t\t} catch(er){\n\t\t\t\t\t\t\t\t\tapp.handleError(er,\"app.loadAppData(\"+idOrSlug+\")\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\n\n\t\t\t\t\t}\n\t\t\t\t});\t\t\n\t\t\t}\n\n\n\n\n\n\t\t\tapp.loadScript = function(url){\n\n\t\t\t\t\/\/ Adds a `<script>` tag with `src = url` to the `<head>` \n\t\t\t\tvar head= document.getElementsByTagName('head')[0];\n\t\t\t\tvar script= document.createElement('script');\n\n\t\t\t\t\/\/ check if this script already present\n\t\t\t\tvar currentScripts = head.getElementsByTagName('script')\n\t\t\t\tfor(var j=0;j<currentScripts.length;j++){\n\t\t\t\t\tif(currentScripts[j].src == url)\n\t\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tscript.type= 'text\/javascript';\n\t\t\t\tscript.src= url;\n\t\t\t\treturn head.appendChild(script);\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\n\n\n\n\n\t\t\tapp.logo = function(params,deviceId,callback){\n\t\t\t\t\/\/ Sends `params` to `deviceId` to draw logo commands\n\t\t\t\t\/\/ Optional `deviceId` specifies the device, else `_deafultDevice` is used\n\t\t\t\t\/\/ Params can be in the default Logo format:\n\t\t\t\t\/\/\t<cmd> <value> <cmd> <value> etc... (line breaks are ignored)\n\t\t\t\t\/\/ or in script form:\n\t\t\t\t\/\/\t<cmd>,<value>;<cmd>,<value>;etc.\n\t\t\t\t\/\/ Optional `callback` is called on completion\n\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\tparams = String(params);\n\t\t\t\tparams = params.replace(\/\\n\/g,\";\");\n\t\t\t\tparams = params.replace(\/;;\/g,\";\");\n\t\t\t\tparams = params.replace(\/^;\/g,\"\");\n\t\t\t\tparams = params.replace(\/  \/g,\" \");\n\n\t\t\t\tparams = params.replace(\/(\\w) (\\d)\/g,\"$1,$2\");\n\t\t\t\tparams = params.replace(\/(\\d) \/g,\"$1;\");\n\t\t\t\tparams = params.replace(\/(\\w) (\\w)\/g,\"$1;$2\");\n\t\t\t\tparams = params.replace(\/ \/g,\"\");\n\n\t\t\t\tthis.callFunction(deviceId,\"logo\",params,callback);\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\t\t\tapp.loop = function(){\n\t\t\t\t\/\/ the `loop` function repeats continuously carrying out any user defined tasks\n\t\t\t\t\/\/ Add new functions to the loops by passing arguments to `loop`\n\t\t\t\t\/\/ arg[0] - function reference or an ad-hoc function\n\t\t\t\t\/\/ arg[1] - the interval for this function, e.g. 1000 will run it every second.\n\t\t\t\t\/\/ arg [2...n] - arguments to the function arg[0]\n\t\t\t\t\/\/ e.g. `app.loop('app.setBackgroundColor',2000,'random')`\n\n\t\t\t\t\/\/ If there are arguments, add the new function to the loop\n\t\t\t\tif(arguments.length){\n\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.func = arguments[0];\n\t\t\t\t\tobj.lastCalled = 0;\n\t\t\t\t\tobj.interval = 0;\n\t\t\t\t\t\n\t\t\t\t\t\/\/ if an interval passed in, use it, or default to always\n\t\t\t\t\tif(arguments.length > 1)\n\t\t\t\t\t\tobj.interval = arguments[1];\n\n\t\t\t\t\t\/\/ if additional arguments, these will be the arguments to pass to the func\n\t\t\t\t\tobj.arguments = [];\n\t\t\t\t\tif(arguments.length > 2){\n\t\t\t\t\t\tfor (var i = 2; i < arguments.length; i++) {\n\t\t\t\t\t\t\tobj.arguments[(i-2)] = arguments[i]\n\t\t\t\t    \t}\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ add this obj to the loop functions\n\t\t\t\t\tapp._loopFunctions[app._loopFunctions.length] = obj;\n\n\t\t\t\t\t\/\/ if called with arguments don't self-call\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tvar now = Date.now();\n\n\t\t\t\t\/\/ now call all the loop functions\n\t\t\t\tfor(var i=0;i<app._loopFunctions.length;i++){\n\t\t\t\t\tif(!app._loopFunctions[i].interval || app._loopFunctions[i].lastCalled + app._loopFunctions[i].interval < now){\n\t\t\t\t\t\tapp._loopFunctions[i].lastCalled = now;\n\t\t\t\t\t\tapp._loopFunctions[i].func.apply(app._loopFunctions[i].arguments)\n\t\t\t\t\t}\n\n\t\t\t\t}\t\n\n\t\t\t\tsetTimeout(app.loop,app._loopTimeout);\n\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\tapp.neoPixel = function(params,deviceId,callback){\n\t\t\t\t\/\/ Sends `params` to `deviceId` to do NeoPixel routines\n\t\t\t\t\/\/ `params` is an object in the format:\n\t\t\t\t\/\/\t{\n\t\t\t\t\/\/\t\troutine: [101...199],\t\/\/ the routine number\n\t\t\t\t\/\/\t\ts: [1...4],    \t\t\t\/\/ Optional, the Strip number, default 1  \n\t\t\t\t\/\/\t\twait: int,\t\t\t\t\/\/ Optional, the number of milliseconds to wait between changes, default 20\n\t\t\t\t\/\/\t\tduration: int,\t\t\t\/\/ Optional, duration of the routine, default to 0 - ongoing\n\t\t\t\t\/\/\t\tcolor: \"hex\"\/{rgb}\t\t\/\/ Optional, color either hex string or rgb object\n\t\t\t\t\/\/\t}\n\t\t\t\t\/\/ Optional `deviceId` specifies the device, else `_deafultDevice` is used\n\t\t\t\t\/\/ Optional `callback` is called on completion\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\ttry{\n\t\t\t\t\t\/\/ construct the value string\n\t\t\t\t\tvar val = \"\";\n\t\t\t\t\tvar arr = [];\n\n\t\t\t\t\t\/\/ Defaults\n\t\t\t\t\tparams.s = params.s || 1;\n\t\t\t\t\tparams.wait = params.wait || 20;\n\t\t\t\t\tparams.duration = params.duration || 0;\n\n\t\t\t\t\tif(params.routine == 102){\n\t\t\t\t\t\tval = this.toRGBInt(params.color);\n\t\t\t\t\t\tarr = [params.routine,params.s,val,params.duration]\n\t\t\t\t\t}\n\nconsole.log(\"app.neoPixel arr\",[arr]);\n\t\t\t\t\t\/\/ expecting array of arrays e.g. [ [1,4,1,1000] , [1,4,0,0] ]\n\t\t\t\t\t\/\/ cmds,id,key,callback\n\t\t\t\t\tthis.sendCommands([arr]);\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.neoPixel()\")\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.onItemClicked = function(e){\n\t\t\t\t\/\/ Saves the `_currentItemId` when `Element` `e` is clicked.\n\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\tif(e.target.classList.contains('item'))\n\t\t\t\t\tapp._currentItemId = app.getIdFromDOMId(e.target.id)\n\t\t\t\tif(e.target.parentElement.classList.contains('item'))\n\t\t\t\t\tapp._currentItemId = app.getIdFromDOMId(e.target.parentElement.id)\n\t\t\t\tif(e.target.parentElement.parentElement.classList.contains('item'))\n\t\t\t\t\tapp._currentItemId = app.getIdFromDOMId(e.target.parentElement.parentElement.id)\n\n\t\t\t\treturn app;\n\t\t\t\t\t\n\t\t\t}\n\n\n\n\n\t\t\tapp.onTouchend = function(e){\n\t\t\t\t\/\/ Event handler for the `touchend` and `mouseup` events\n\n\t\t\t\tapp.isTouching = false;\t\n\t\t\t}\t\t\n\n\n\t\t\tapp.onTouchmove = function(e){\n\t\t\t\t\/\/ Event handler when touch or mouse moves\n\n\t\t\t\t\/\/ Avoid calling this method if it is currently executing\n\t\t\t\tif(app._isActiveTouchmove)\n\t\t\t\t\treturn;\n\n\t\t\t\tapp._isActiveTouchmove = true;\n\n\n\t\t\t\tvar ident = Math.random();\n\n\t\t\t\t\/\/ Event handler for the `touchmove` and `mousemove` events\n\t\t\t\tvar touchobj = ((e.event.changedTouches) ? e.event.changedTouches[0] : e.event) \/\/ reference first touch point for this event\n\t\t\t\tapp.touchX = touchobj.clientX;\n\t\t\t\tapp.touchY = touchobj.clientY;\t\n\n\t\t\t\t\/\/ Get the touchAngle\n\t\t\t\tapp.touchAngle = Math.atan2(app.touchY - app.touchStartY, app.touchX - app.touchStartX) * 180 \/ Math.PI;\n\t\t\t\t\/\/ make angle 0-360, not negatives.\n\t\t\t\tif(app.touchAngle < 0)\n\t\t\t\t\tapp.touchAngle = 360 + app.touchAngle;\n\t\t\t\t\n\n\t\t\t\t\/\/ see if hovering over item\n\t\t\t\t\/\/ Get the Element below the current point\n\t\t\t\tvar thisHoverElement = document.elementFromPoint(touchobj.clientX, touchobj.clientY)\n\t\t\t\tvar thisHoverItem = app.findParentItem(thisHoverElement)\n\n\t\t\t\t\/\/ Is it a new Element\n\t\t\t\tif(!app._currentHoverItem || (thisHoverItem && thisHoverItem.id != app._currentHoverItem.id)){\n\t\t\t\t\tvar oldHoverItem = app._currentHoverItem;\n\n\t\t\t\t\t\/\/ Save this as the current Element and Item\n\t\t\t\t\tapp._currentHoverElement = thisHoverElement;\n\t\t\t\t\tapp._currentHoverItem = thisHoverItem;\n\n\n\t\t\t\t\t\/\/ reset the hover image on oldHoverItem if it has a hover image\n\t\t\t\t\tif(oldHoverItem && oldHoverItem.hoverImage && oldHoverItem.originalImage)\n\t\t\t\t\t\toldHoverItem.setImage(oldHoverItem.originalImage)\n\n\n\t\t\t\t\t\/\/ set the new hover image if required\n\t\t\t\t\tif(app._currentHoverItem && app._currentHoverItem.hoverImage){\n\t\t\t\t\t\tapp._currentHoverItem.setImage(app._currentHoverItem.hoverImage)\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ call actions for this `Item`\n\t\t\t\t\tif(app._currentHoverItem && app._currentHoverItem.callActions && app._currentHoverItem.onHoverDoActions)\n\t\t\t\t\t\tapp._currentHoverItem.callActions();\n\t\t\t\t}\n\n\t\t\t\t\/\/        e.preventDefault()\n\t\t\t\tapp._isActiveTouchmove = false;\n\n\t\t\t}\n\n\n\t\t\tapp.onTouchstart = function(e){\n\t\t\t\t\/\/ Event handler for the `touchstart` and `mousedown` events\n\n\t\t\t\t\/\/ need to make sure scroll rules have been applied, because on some mobiles the screen event doesn't fire\n\t\t\t\tapp.applyScrollRules(document.querySelector('.screen'));\n\n\t\t\t\tapp._isTouching = true;\t\n\t\t\t\tvar touchobj = ((e.event.changedTouches) ? e.event.changedTouches[0] : e.event) \/\/ reference first touch point for this event\n\t\t\t\tapp.touchStartX = touchobj.clientX;\n\t\t\t\tapp.touchStartY = touchobj.clientY;\t\n\t\t\t\tapp.touchX = touchobj.clientX;\n\t\t\t\tapp.touchY = touchobj.clientY;\t\n\t\t\t}\n\n\n\n\n\t\t\tapp.preload = function(images){\n\t\t\t\t\/\/ Preloads the `images` passed in an array\n\t\t\t\t\/\/ Format of `images':\n\t\t\t\t\/\/  `[ 'url1','urls',...]`\n\t\t\t\t\/\/ returns `this`\n\n\t\t\t\tfor(var i=0;i<images.length;i++){\n\t\t\t\t\t\/\/ Preload the image\n\t\t\t\t\tjQuery('<img \/>')[0].src = images[i];\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.prependToVariable = function(variable,value){\n\t\t\t\t\/\/ prepends `value` to `variable` and return the result\n\n\t\t\t\treturn this.appendToVariable(variable,value,true);\n\t\t\t}\n\n\n\n\t\t\tapp.reformatCaptureItems = function(id,el){\n\t\t\t\t\/\/ Reformat `Items` of type `Capture` to show the `file input` element\n\t\t\t\t\/\/ This is a temporaru fix because the AppShed UI did not update to support HTML5 capture items\n\n\t\t\t\tvar els = el.getElementsByClassName('capture');\n\t\t\t\tfor(var i=0;i<els.length;i++){\n\t\t\t\t\ttry{\n\t\t\t    \t\tif(els[i].getElementsByClassName('file').length){\n\t\t\t    \t\t\tbreak;\n\t\t\t    \t\t}\n\n\t\t\t\t\t\tvar input = document.createElement('input');\n\t\t\t    \t\tinput.type=\"file\";\n\t\t\t    \t\tinput.id = els[i].dataset.name;\n\t\t\t    \t\tinput.name = els[i].dataset.name;\n\t\t\t    \t\tinput.className = \"file\";\n\t\t\t    \t\tinput.accept = els[i].dataset.capturetype+\"\/*\";\n\t\t\t    \t\tinput.dataset.variable = els[i].dataset.name;\n\t\t\t    \t\tinput.dataset.name = els[i].dataset.name;\n\t\t\t    \t\tinput.dataset.capturetype = els[i].dataset.capturetype;\n\n\n\t\t\t    \t\tvar offEl = els[i].getElementsByClassName('off')[0];\n\t\t\t    \t\tvar parent = offEl.parentNode;\n\t\t\t    \t\tparent.appendChild(input);\n\t\t\t    \t\toffEl.style.display = 'none';\t\t\t\t\n\t\t\t\t\t}catch(er){\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\n\n\t\t\tapp.reformatDataItems = function(id,el){\n\t\t\t\t\/\/ Reformat `Items` that have special functionality for `Data`\n\t\t\t\t\/\/ returns `this`\n\n\t\t\t\tvar vars = app.data.getVariables();\n\n\n\t\t\t\t\/\/ DATA SELECT\n\t\t\t\t\/\/ Add variable selection\n\n\t\t\t\tapp.addStyles(\".data_select_controls input{zoom: 2;} .data_select_variable label{float: left; width: inherit; padding-right: 10px} .data_select_controls select{width: inherit;} \")\t   \n\n\t\t\t\tjQuery(\".data_select_controls\").remove();\n\n\n\t\t\t\tjQuery('.data_select.item').each(function( index ) {\n\n\t\t\t\t\tvar el = (this);\n\n\t\t\t\t\tvar id = 'data_select'+el.id.replace(\/item\/,\"\");\n\t\t\t\t\tvar insert = '<div id=\"'+id+'\" class=\"data_select_controls\">';\n\n\t\t\t\t\tinsert += '<div class=\"data_select_variable\">';\n\n\t\t\t\t\tvars.forEach(function(currentValue, index, array) {\n\t\t\t\t\t\tinsert += '<label><input name=\"data_select_variable_'+currentValue+'\" type=\"checkbox\">'+currentValue+'<\/label>'; \n\t\t\t\t\t});\n\t\t\t\t\tinsert += \"<\/div>\"; \/\/ data_select_variable\n\n\t\t\t\t\tinsert += \"<\/div>\"; \/\/ data_select_controls\n\n\t\t\t\t\tjQuery(this).before(insert)\n\t\t\t\t});\n\n\n\n\t\t\t\t\/\/ DATA FILTER\n\t\t\t\t\/\/ add additional controls to buttons with class `data_filter`\n\t\t\t\t\/\/ Remove the existing controls if present\n\t\t\t\tjQuery(\".data_filter.item .data_filter_controls\").remove();\n\n\t\t\t\tapp.addStyles(\".data_filter.item{clear: both;} #app\"+app.id+\" .data_filter.item.button button.button{width:inherit;} .data_filter_variable,.data_filter_comparison,.data_filter_value{float: left; width: inherit; padding-right: 10px} .data_filter_value{width: 50px;} .data_filter_controls input, .data_filter_controls select{width: inherit;} .data_filter_controls input{line-height: 24px;}\")\t   \n\t\t\t\tvar insert = '<div class=\"data_filter_controls\">';\n\n\t\t\t\tinsert += '<div class=\"data_filter_variable\">';\n\t\t\t\tinsert += '<select name=\"data_filter_variable\">';\n\t\t\t\tinsert += '<option value=\"\"> - no filter - <\/option>';\n\t\t\t\tvars.forEach(function(currentValue, index, array) {\n\t\t\t\t\tinsert += \"<option>\"+currentValue+\"<\/option>\"; \n\t\t\t\t});\n\t\t\t\tinsert += \"<\/select><\/div>\";\n\n\n\t\t\t\tinsert += '<div class=\"data_filter_comparison\"><select name=\"data_filter_comparison\">';\n\t\t\t\t[\"==\",\"!=\",\"<>\",\">\",\"<\",\">=\",\"<=\"].forEach(function(currentValue, index, array) {\n\t\t\t\t\tinsert += \"<option>\"+currentValue+\"<\/option>\"; \n\t\t\t\t});\n\t\t\t\tinsert += \"<\/select><\/div>\";\n\n\t\t\t\tinsert += '<div class=\"data_filter_value\"><input name=\"data_filter_value\" \/><\/div>';\n\n\t\t\t\tinsert += \"<\/div>\"; \/\/ data_filter_controls\n\n\t\t\t\tjQuery('.data_filter.item button').before(insert);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\n\t\t\tapp.reformatInputTypes = function(id,el){\n\t\t\t\t\/\/ Reformat `Items` that have className `range` or 'slider' to show the `range input` element\n\t\t\t\t\/\/ This is a temporaru fix because the AppShed UI did not update to support HTML5 range items\n\t\t\t\t\/\/ returns `this`\n\n\n\t\t\t\tvar inputTypes = [\"color\",\"date\",\"datetime-local\",\"email\",\"month\",\"number\",\"range\",\"search\",\"tel\",\"time\",\"url\",\"week\"];\n\n\t\t\t\t\/\/ Set the `type` for `textbox` Items\n\t\t\t\tfor(var t=0;t<inputTypes.length;t++){\n\t\t\t\t\tvar els = el.getElementsByClassName(inputTypes[t]);\n\t\t\t\t\tfor(var i=0;i<els.length;i++){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\/\/ check that the `type` has not already been set\n\t\t\t\t    \t\tif(els[i].getElementsByClassName('textbox')[0].type == inputTypes[t]){\n\t\t\t\t    \t\t\tbreak;\n\t\t\t\t    \t\t}\t\t\t\t\n\n\t\t\t\t\t\t\tels[i].getElementsByClassName('textbox')[0].type = inputTypes[t];\n\t\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t\/\/ Disable\t\n\t\t\t\tjQuery(\".disabled.item input\").each(function(){\n\t\t\t\t\tjQuery(this).attr(\"disabled\", \"true\");\n\t\t\t\t});\n\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\t\t\tapp.refreshScroll = function(){\n\t\t\t\t\/\/ Refresh the iScroll\n\t\t\t\t\/\/ This is needed if items are added to the screen, as the size of the scroll area changes\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tjQuery('.items')[0].retrieve('scroll').refresh();\t\t\t\t\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\t\t\tapp.removeScreenEvent_xxx = function(identifier){\n\t\t\t\t\/\/ Stops a `Screen` event from being called when a screen loads\n\t\t\t\t\/\/ `identifier` is the return value of `app.addScreenEvent()` \n\n\t\t\t}\n\n\n\t\t\tapp.removeTabEvent_xxx = function(identifier){\n\t\t\t\t\/\/ Stops a `Tab` event from being called when a screen loads\n\t\t\t\t\/\/ `identifier` is the return value of `app.addTabEvent()` \n\n\t\t\t}\n\n\n\t\t\tapp.removeVariableEvent_xxx = function(identifier){\n\t\t\t\t\/\/ Stops a `Variable` event from being called when a variable value changes\n\t\t\t\t\/\/ `identifier` is the return value of `app.addVariableEvent()` \n\n\t\t\t}\n\n\n\n\n\t\t\tapp._saveScreenData = function(id,el){\n\t\t\t\t\/\/ Save data about the screen to localStorage\n\t\t\t\t\/\/ Return `this`\n\nconsole.log(\"_saveScreenData\",id,el,el.classList.length,el.dataset)\n\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t\t\t\n\n\n\n\n\t\t\tapp.sendCommands = function(cmds,id,key,callback){\n\t\t\t\t\/\/ Sends commands `cmds` to a `Device` \n\t\t\t\t\/\/ `cmds` expect an array of `command` arrays, where each `command` array contains 4 items: `[format,pin,value,duration]`\n\t\t\t\t\/\/ Example: Turn digital Pin 4 on for 1 second\n\t\t\t\t\/\/\t\t[ [1,4,1,1000] , [1,4,0,0] ]   \n\t\t\t\t\/\/ Optional `id` specifies the Device ID, otherwise `_defaultDevice` is used\n\t\t\t\t\/\/ Optional `key` specidies the Pro key\n\t\t\t\t\/\/ Optional `callback` is called once the commands have been sent.\n\t\t\t\t\/\/ `callback` may be called multiple times if the number of commands being sent exceeds `Device.ioMaxCommandsPerBatch`\n\n\t\t\t\tthis.getDevice(id,key).sendCommands(cmds,callback)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\n\t\t\tapp.setAction = function(idOrClassName,handler){\n\t\t\t\t\/\/ Sets the action `handler` for `idOrClassName`\n\t\t\t\t\/\/ Removes all other Actions for this `idOrClassName`\n\t\t\t\t\n\t\t\t\tthis._actions[idOrClassName] = null;\n\t\t\t\tthis.addAction(idOrClassName,handler);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.setBackground = function(color){\n\t\t\t\t\/\/ Shortcut for app.setBackgroundColor\n\t\t\t\t\/\/ If no `color` uses random color\n\t\t\t\t\/\/ Returns app.getBackgroundColor()\n\n\t\t\t\tif(!color)\n\t\t\t\t\tcolor = app.getRandomColor();\n\n\t\t\t\treturn app.setBackgroundColor(color);\n\n\t\t\t}\n\n\n\n\t\t\tapp.setBackgroundColor = function(color){\n\t\t\t\t\/\/ Set the `BackgroundColor` of the current screen to `color`\n\t\t\t\t\/\/ Returns `this`\n\t\t\t\tapp.getScreen().setBackgroundColor(color);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.setBackgroundImage = function(src,method){\n\t\t\t\t\/\/ Set the `BackgroundIamge` of the current screen to `src` \n\t\t\t\t\/\/ Optional `method` determines the layout\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tapp.getScreen().setBackgroundImage(src,method);\n\t\t\t}\n\n\n\n\t\t\tapp.setDefaultDevice = function(idOrProps){\n\t\t\t\t\/\/ Sets the default device for the app. \n\t\t\t\t\/\/ `idOrProps` can pass in either the `deviceId` or a properties `Object`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tvar props = this.idOrPropsToObject(idOrProps);\n\t\t\t\tthis._defaultDevice = props.id;\n\t\t\t\tthis.getDevice(props);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\t\t\tapp.setInterval = function(func,delay,timeout,name){\n\t\t\t\t\/\/ repeatedly calls a function `func` with a fixed `delay`\n\t\t\t\t\/\/ optionally stops after `timeout`\n\t\t\t\t\/\/ Optionally gives this interval a `name` which can be used by `clearInterval`\n\n\t\t\t\ttry{\n\n\t\t\t\t\t\/\/ make sure another interval is not using \"name\" - cancel it\n\t\t\t\t\tapp.clearInterval(name);\n\n\t\t\t\t\tvar identifier = app.addInterval(window.setInterval(func,delay),name)\n\t\t\t\t\tif(timeout)\n\t\t\t\t\t\tsetTimeout(function() { app.clearInterval(identifier);}, timeout)\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,\"app.setInterval()\")\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\t\t\tapp.setLED = function(val,id){\n\t\t\t\t\/\/ Sets the built-in LED to `val`\n\t\t\t\t\/\/ `val` can be 1\/0 or ON\/OFF or true\/false\n\t\t\t\t\/\/ Optional `id` to use a specific `Device`\n\t\t\t\t\/\/ If no `id` passed in the default `Device` is used \n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\ttry{\n\t\t\t\t\tthis.getDevice(id?id:this._defaultDevice).setLED(val);\n\t\t\t\t}catch(er){\n\t\t\t\t\tthis.handleError(er,\"app.setLED()\")\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.setMotorDriver = function(type,id,key,callback){\n\t\t\t\t\/\/ Sends commands `cmds` to a `Device` \n\t\t\t\t\/\/ `cmds` expect an array of `command` arrays, where each `command` array contains 4 items: `[format,pin,value,duration]`\n\t\t\t\t\/\/ Example: Turn digital Pin 4 on for 1 second\n\t\t\t\t\/\/\t\t[ [1,4,1,1000] , [1,4,0,0] ]   \n\t\t\t\t\/\/ Optional `id` specifies the Device ID, otherwise `_defaultDevice` is used\n\t\t\t\t\/\/ Optional `key` specidies the Pro key\n\n\t\t\t\tthis.getDevice(id,key).setMotorDriver(type,callback);\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\n\n\t\t\tapp.setPin = function(pinNameOrNumber,val,id,key){\n\t\t\t\t\/\/ Sets the pin number `pinNameOrNumber` to `val`\n\t\t\t\t\/\/ Optional `id` to use a specific `Device`\n\t\t\t\t\/\/ If no `id` passed in the default `Device` is used (`IOIO` is the initial default device)\n\n\n\n\t\t\t\tvar device = this.getDevice((id?id:this._defaultDevice),key)\n\n\t\t\t\t\/\/ For IOIO use built in iot.setPin\n\t\t\t\tif(device.id == \"IOIO\"){\n\t\t\t\t\ttry{\n\t\t\t\t\t\twindow.appbuilder.events.iot.setPin(pinNameOrNumber,val)\n\t\t\t\t\t}catch(er){this.handleError(er,\"app.setPin() IOIO error\")}\n\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ all other devices... use Device methods\n\t\t\t\t\tdevice.setPin(pinNameOrNumber,val);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\t\t\tapp.setRGB = function(color,pins,id,key){\n\t\t\t\t\/\/ Sets the RGB LED to `color` (see Device.setRGB)\n\t\t\t\t\/\/ Optional `id` to use a specific `Device`\n\t\t\t\t\/\/ If no `id` passed in the default `Device` is used\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\tthis.getDevice((id?id:this._defaultDevice),key).setRGB(color,pins);\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\n\n\t\t\tapp.setVariable_xxx = function(name, value){\n\t\t\t\t\/\/ Set the value of the variable `name` to `value`.\n\t\t\t\t\/\/ [NOTE: the method name is setVariable without _xxx and it already exists in the built-in JavaScript library. \n\t\t\t\t\/\/   It is included here for documentation purposes only.]\n\t\t\t}\n\n\n\n\t\t\tapp.showLoader = function(timeout){\n\t\t\t\t\/\/ Shows the loading element\n\t\t\t\t\/\/ Optional - Hide the loader after `timeout`\n\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\n\t\t\t\tdocument.getElementsByClassName('loader')[0].style.display = 'block';\n\n\t\t\t\tif(timeout)\n\t\t\t\t\tsetTimeout(function(){document.getElementsByClassName('loader')[0].style.display = 'none'},timeout)\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tapp.showRemoteScreen_xxx = function(url){\n\t\t\t\t\/\/ The app will navigate to a remote screen that is loaded from `url`. \n\t\t\t\t\/\/ `url` can contain parameters in the form `{name}` that will be replaced with the value of a form `variable` with the given `name`.\n\t\t\t\t\/\/ For example url = `https:\/\/mydomain.com\/myscript.php?FirstName=[myName]`\n\t\t\t\t\/\/   This requires a form `variable` in your app with the Name `myName`\n\t\t\t\t\/\/ [NOTE: the method name is showRemoteScreen without _xxx and it already exists in the built-in JavaScript library. \n\t\t\t\t\/\/   It is included here for documentation purposes only.]\n\n\t\t\t}\n\n\n\t\t\tapp.showScreen_xxx = function(id){\n\t\t\t\t\/\/ The app will navigate the screen with `id`\n\t\t\t\t\/\/ [NOTE: the method name is showScreen without _xxx and it already exists in the built-in JavaScript library. \n\t\t\t\t\/\/   It is included here for documentation purposes only.]\n\t\t\t} \n\n\t\t\tapp.showTab_xxx = function(id){\n\t\t\t\t\/\/ The app will navigate the tab with `id`\n\t\t\t\t\/\/ [NOTE: the method name is showTab without _xxx and it already exists in the built-in JavaScript library. \n\t\t\t\t\/\/   It is included here for documentation purposes only.]\n\t\t\t}\n\n\n\n\n\n\t\t\tapp.togglePin = function(pinNameOrNumber,id){\n\t\t\t\t\/\/ Toggles the pin `pinNameOrNumber` \n\t\t\t\t\/\/ Optional `id` to use a specific `Device`\n\t\t\t\t\/\/ If no `id` passed in the default `Device` is used (`IOIO` is the initial default device)\n\n\n\t\t\t\tvar device = this.getDevice(id?id:this._defaultDevice)\n\n\t\t\t\t\/\/ For IOIO use built in iot.setPin\n\t\t\t\tif(device.id == \"IOIO\"){\n\t\t\t\t\ttry{\n\t\t\t\t        window.appbuilder.events.iot.togglePinValue(pinName)\n\t\t\t\t\t}catch(er){this.handleError(er,\"app.togglePin() IOIO error\")}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ TODO Code to toggle in for device\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\t\t\tapp.togglePinValue = function(pinNameOrNumber,id){\n\t\t\t\t\/\/ Override method for `togglePin`\n\t\t\t\treturn this.togglePin(pinNameOrNumber,val,id);\n\t\t\t}\n\n\n\n\n\n\n\n\t\t\tapp.toRGB = function(color){\n\t\t\t\t\/\/ Returns an object with `r,g,b` properties for the supplied `color'\n\t\t\t\t\/\/ `color` must be a 6 character Hexadecimal \n\t\t\t\t\/\/ If `color` is already an rgb object, return it \n\n\t\t\t\tif(typeof color === \"object\" && color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\"))\n\t\t\t\t\treturn color;\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tcolor.match(\/[A-Za-z0-9]{2}\/g).map(function(v,index) { \n\t\t\t\t\tswitch(index){\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tobj.r = parseInt(v, 16);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tobj.g = parseInt(v, 16);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tobj.b = parseInt(v, 16);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn obj;\n\n\t\t\t}\n\n\n\n\n\t\t\tapp.toRGBInt = function(color){\n\t\t\t\t\/\/ Returns the RGB integer value for `color`\n\t\t\t\t\/\/ `color` can be hex color or RGB object\n\n\t\t\t\tcolor = this.toRGB(color);\n\n\t\t\t\treturn 256*256*color.r+256*color.g+color.b;\n\t\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\/\/ Item Object\n\t\t\tapp.Item = function(id){\n\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.element= null; \/\/ HTML DOM element for this Item\n\t\t\t\tthis.domId= '';\n\t\t\t\tthis.hoverImage = null; \/\/ Image to display when hovering over this item (our touchover)\n\t\t\t\tthis.onHoverDoActions = false;\n\t\t\t\tthis.originalImage = null;\n\n\t\t\t\ttry{\n\t\t\t\t\tthis.domId = 'item'+this.id;\n\t\t\t\t\tthis.element = document.getElementById(this.domId)\n\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,'Item.init()')\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.addBefore = function(){\n\t\t\t\t}\n\n\n\t\t\t\tthis.callActions = function(){\n\t\t\t\t\t\/\/ calls all actions for this `Item`\n\t\t\t\t\t\/\/ The default Action is set in AppBuilder\n\t\t\t\t\t\/\/ Additional Actions can be set using `app.addAction()`\n\t\t\t\t\t\/\/ Actions can be identified using the `itemId`, `DOM id`, and all `Classnames`\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\t\/\/ call the default action\n\t\t\t\t\tappbuilder.app.api.phone.navigator.click(null, this.element );\n\n\t\t\t\t\tif(app._actions[this.id])\n\t\t\t\t\t\tthis.callEachAction(app._actions[this.id])\n\n\t\t\t\t\tif(app._actions[this.domId])\n\t\t\t\t\t\tthis.callEachAction(app._actions[this.domId])\n\n\t\t\t\t\t\/\/ for each class, call actions\n\t\t\t\t\tif(this.element && this.element.classList){\n\t\t\t\t\t\tfor(var i=0;i<this.element.classList.length;i++){\n\t\t\t\t\t\t\tif(app._actions[this.element.classList.item(i)])\n\t\t\t\t\t\t\t\tthis.callEachAction(app._actions[this.element.classList.item(i)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.callEachAction = function(arr){\n\t\t\t\t\t\/\/ Loops through `arr` and calls the action for each element\n\t\t\t\t\tif(arr && arr.length){\n\t\t\t\t\t\tfor(var i=0;i<arr.length;i++)\n\t\t\t\t\t\t\tarr[i]();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.containsClass = function(className){\n\t\t\t\t\t\/\/ Returns true if this `Item` contains the custom class `className`\n\n\t\t\t\t\treturn this.element.classList.contains(className);\n\n\t\t\t\t}\n\n\t\t\t\tthis.getBackgroundColor = function(){\n\t\t\t\t\t\/\/ Returns the `backgroundColor` of this `Item`\n\t\t\t\t\n\t\t\t\t\treturn this.element.style.backgroundColor;\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.getIconAbove = function(){\n\t\t\t\t\t\/\/ returns the icon in the row above this icon\n\t\t\t\t\treturn app.getScreen().getIconAbove(this.id)\n\t\t\t\t}\n\n\t\t\t\tthis.getIconBelow = function(){\n\t\t\t\t\t\/\/ returns the icon in the row above this icon\n\t\t\t\t\treturn app.getScreen().getIconBelow(this.id)\n\t\t\t\t}\n\n\t\t\t\tthis.getIconLeft = function(){\n\t\t\t\t\t\/\/ returns the icon on the left of this icon\n\t\t\t\t\treturn app.getScreen().getIconLeft(this.id)\n\t\t\t\t}\n\n\t\t\t\tthis.getIconRight = function(){\n\t\t\t\t\t\/\/ returns the icon on the right of this icon\n\t\t\t\t\treturn app.getScreen().getIconRight(this.id)\n\t\t\t\t}\n\n\n\t\t\t\tthis.getImage = function(){\n\t\t\t\t\t\/\/ returns the URL of the image for this item\n\t\t\t\t\treturn app.findClass(this.element,\"image\").src\n\t\t\t\t}\n\n\n\t\t\t\tthis.getPosition = function(){\n\t\t\t\t\t\/\/ Returns an object with the x,y coordinates of the item\n\t\t\t\t\t\/\/ This is only relevant when the item has been placed using `this.place()`;\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.x = parseFloat(String(this.element.style.left).replace(\"\/\\D\/g\",\"\"))\n\t\t\t\t\tobj.y = parseFloat(String(this.element.style.top).replace(\"\/\\D\/g\",\"\"))\n\n\t\t\t\t\treturn obj;\n\t\t\t\t}\n\n\t\t\t\tthis.getSubTitle = function(str){\n\t\t\t\t\t\/\/Returns the `Subtitle` of the item\n\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn app.findClass(this.element,\"text\").innerText;\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.getSubTitle()\")\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\n\t\t\t\tthis.getText = function(str){\n\t\t\t\t\t\/\/Returns the `Text` of the item\n\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn app.findClass(this.element,\"text\").innerText;\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t\/\/ the text might be in a 'html' class\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\treturn app.findClass(this.element,\"html\").innerText;\n\t\t\t\t\t\t}catch(er2){\n\t\t\t\t\t\t\tapp.handleError(er+\", \"+er2,\"Item.getText()\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\n\t\t\t\tthis.getTitle = function(str){\n\t\t\t\t\t\/\/Returns the `Title` of the item\n\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn app.findClass(this.element,\"title\").innerText;\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.getText()\")\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tthis.isAbove = function(otherId){\n\t\t\t\t\t\/\/ returns true this item is above the other Item\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn (app.getItem(otherId).getIconAbove().id == this.id) \n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.isBelow = function(otherId){\n\t\t\t\t\t\/\/ returns true this item is below the other Item\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn (app.getItem(otherId).getIconBelow().id == this.id) \n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.isLeft = function(otherId){\n\t\t\t\t\t\/\/ returns true this item is left of the other Item\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn (app.getItem(otherId).getIconLeft().id == this.id) \n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.isRight = function(otherId){\n\t\t\t\t\t\/\/ returns true this item is right of the other Item\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn (app.getItem(otherId).getIconRight().id == this.id) \n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.place = function(x,y){\n\t\t\t\t\t\/\/ place the item at a certain absolute x,y position\n\n\t\t\t\t\ttry{\n\n\t\t\t\t\t\tif(this.element){\n\t\t\t\t\t\t\tthis.element.style.position = 'absolute';\n\t\t\t\t\t\t\tthis.element.style.left = parseInt(x)+'px';\n\t\t\t\t\t\t\tthis.element.style.top = parseInt(y)+'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(addscrer,'Item.place()')\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this\n\t\t\t\t}\n\n\t\t\t\tthis.setBackgroundColor = function(color){\n\t\t\t\t\t\/\/set the background color of this Item to `color`\n\t\t\t\t\t\/\/ Special case: `color` is `'random'` will get a random color.\n\t\t\t\t\ttry{\n\t\t\t\t\t\tif(!color || color == 'random')\n\t\t\t\t\t\t\tcolor = app.getRandomColor();\n\t\t\t\t\t\tthis.element.style.backgroundColor = color;\n\t\t\t\t\t}catch(er){app.handleError(er,\"Item.setBackgroundColor()\")}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.setBackgroundImage = function(src,method){\n\t\t\t\t\t\/\/ Sets the `backgroundImage` of this `Item` to `src`. \n\t\t\t\t\t\/\/ Optional `method` determines the layout\n\t\t\t\t\t\/\/ One of: `fit` | `fill` | `stretch` | `center` | `tile`\n\t\t\t\t\t\/\/ `method` defaults to `fit` \n\n\t\t\t\t\tif(!method)\n\t\t\t\t\t\tmethod = 'fill'\n\n\t\t\t\t\tvar items = this.element;\n\n\t\t\t\t\titems.style.backgroundImage = \"url('\"+src+\"')\";\n\t\t\t\t\titems.style.backgroundRepeat = \"no-repeat\";\n\t\t\t\t\titems.style.backgroundPosition = \"center center\";\n\n\t\t\t\t\tif(method == 'fill')\n\t\t\t\t\t\titems.style.backgroundSize = \"cover\";\n\t\t\t\t\telse if(method == 'stretch')\n\t\t\t\t\t\titems.style.backgroundSize = \"100% 100%\";\n\t\t\t\t\telse if(method == 'center')\n\t\t\t\t\t\titems.style.backgroundSize = items.style.height+\"px \"+items.style.width+\"px\";\n\t\t\t\t\telse if(method == 'tile'){\n\t\t\t\t\t\titems.style.backgroundSize = items.style.height+\"px \"+items.style.width+\"px\";\n\t\t\t\t\t\titems.style.backgroundRepeat = \"repeat\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\titems.style.backgroundSize = \"contain\";\n\n\n\t\t\t\t\treturn this\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.setHTML = function(str){\n\t\t\t\t\t\/\/set the value of Html to `str`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"html\").innerHTML = str\n\t\t\t\t\t}catch(er){app.handleError(er,\"Item.setHTML()\")}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.setImage = function(src){\n\t\t\t\t\t\/\/set the image URL to `src`\n\t\t\t\t\tapp.findClass(this.element,\"image\").src = src;\n\t\t\t\t\treturn this\n\t\t\t\t}\n\n\n\t\t\t\tthis.setLabel = function(str){\n\t\t\t\t\t\/\/set the value of Label to `str`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"button\").innerHTML = str\n\t\t\t\t\t}catch(er){app.handleError(er,\"Item.setLabel()\")}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.setLabelColor = function(color){\n\t\t\t\t\t\/\/set the color of Label to `color`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"button\").style.color = color\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.setLabelColor()\")\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.setSubTitle = function(str){\n\t\t\t\t\t\/\/set the value of Sub Title to `str`\n\t\t\t\t\tapp.findClass(this.element,\"text\").innerHTML = str\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.setSubTitleColor = function(color){\n\t\t\t\t\t\/\/set the color of SubTitle to `color`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"text\").style.color = color\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.setSubTitleColor()\")\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.setText = function(str){\n\t\t\t\t\t\/\/set the value of Text to `str`\n\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"text\").innerHTML = str\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t\/\/ the text might be in a 'html' class\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tapp.findClass(this.element,\"html\").innerHTML = str\n\t\t\t\t\t\t}catch(er2){\n\t\t\t\t\t\t\tapp.handleError(er+\", \"+er2,\"Item.setText()\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.setTextColor = function(color){\n\t\t\t\t\t\/\/set the color of Text to `color`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"text\").style.color = color\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t\/\/ the text might be in a 'html' class\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tapp.findClass(this.element,\"html\").style.color = color\n\t\t\t\t\t\t}catch(er2){\n\t\t\t\t\t\t\tapp.handleError(er+\", \"+er2,\"Item.setTextColor()\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.setTitle = function(str){\n\t\t\t\t\t\/\/set the value of Title to `str`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"title\").innerHTML = str\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.setTitle()\")\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.setTitleColor = function(color){\n\t\t\t\t\t\/\/set the color of Title to `color`\n\t\t\t\t\ttry{\n\t\t\t\t\t\tapp.findClass(this.element,\"title\").style.color = color\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.setTitleColor()\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.swap = function(otherId){\n\t\t\t\t\t\/\/ swaps this icon with the other \n\t\t\t\t\ttry{\n\t\t\t\t\t\tvar parentNode = this.element.parentNode;\n\t\t\t\t\t\tvar thisClone = this.element.cloneNode(true);\n\t\t\t\t\t\tvar otherItem = app.getItem(otherId);\n\t\t\t\t\t\tvar otherParent = otherItem.element.parentNode;\n\t\t\t\t\t\tvar otherClone = otherItem.element.cloneNode(true);\n\t\t\t\t\t\tparentNode.replaceChild(otherClone,this.element);\n\t\t\t\t\t\totherParent.replaceChild(thisClone,otherItem.element);\n\n\t\t\t\t\t\tapp.addScreenClickHandlers();\n\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Item.swap()\")\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.toString = function(){\n\t\t\t\t\t\/\/returns a string representation of the object\n\t\t\t\t\treturn \"AppShed Object: Item (\"+this.id+\")\"\n\t\t\t\t}\n\n\t\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\/\/ Screen Object\n\t\t\tapp.Screen = function(id){\n\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.element = null;\n\t\t\t\tthis.domId = '';\n\n\t\t\t\tthis.data; \/\/ Data object for this screen\n\t\t\t\tthis.items = {};\n\t\t\t\tthis.icons = {};\n\n\t\t\t\tthis.originalBackgroundImage; \n\n\t\t\t\ttry{\n\n\t\t\t\t\tthis.domId = 'screen'+this.id;\n\t\t\t\t\tthis.element = document.getElementById(this.domId)\n\n\n\t\t\t\t}catch(er){\n\t\t\t\t\tapp.handleError(er,'Screen.init()')\n\t\t\t\t}\n\n\n\t\t\t    this.addIconRow = function(rowHTML,index,data){\n\t\t\t    \t\/\/ Adds a row of `Icons` by inserting `rowHTML` into the table\n\t\t\t    \t\/\/ `index` specifies the row where to insert. Defaults to -1 (bottom of the table)\n\t\t\t    \t\/\/ If `rowHTML` is ommitted then the HTML is generated using `data`\n\t\t\t    \t\/\/ `data` contains the values to be used for the Icons. \n\n\t\t\t    \tif(this.getType() == \"icon\"){\n\t\t\t    \t\tif(!index)\n\t\t\t    \t\t\tindex = -1;\n\t\t\t    \t\tif(!rowHTML)\n\t\t\t    \t\t\trowHTML = this.getIconRowHTML(null,null,data);\n\t\t\t    \t\t\n\t\t\t    \t\tthis.getTable().insertRow(index).outerHTML = rowHTML;\n\n\t\t\t\t\t\tthis.clearItemsCache();\n\t\t\t    \t} \n\n\t\t\t    \treturn this;\n\n\n\t\t\t    }\n\n\t\t\t    this.addIconRows = function(numRows,data){\n\t\t\t    \t\/\/ adds numRows rows of icons \n\t\t\t    \t\/\/ Uses `data` to populate the rows\n\n\t\t\t    \tif(this.getType() == \"icon\"){\n\n\t\t\t    \t\tfor(var i=0;i<numRows;i++){\n\t\t\t    \t\t\t\/\/ get the data for this row if it exists\n\t\t\t\t\t\t\tvar thisData = ((data && data[i]) ? data[i] : {})\t\n\t\t\t\t\t\t\t\/\/ add the default if it exists\n\t\t\t\t\t\t\tif(data && data['default'])\n\t\t\t\t\t\t\t\tthisData['default'] = data['default']\n\n\t\t\t    \t\t\tthis.addIconRow(null,null,thisData)\n\t\t\t    \t\t}\n\t\t\t    \t}\n\n\t\t\t    \treturn this;\n\n\t\t\t    }\n\n\n\t\t\t    this.clearItemsCache = function(){\n\t\t\t    \t\/\/ Clears the `items` hash (local cache)\n\t\t\t    \tthis.items = {};\n\t\t\t    }\n\n\n\n\t\t\t\tthis.containsClass = function(className){\n\t\t\t\t\t\/\/ Returns true if this `Screen` contains the custom class `className`\n\n\t\t\t\t\treturn this.element.classList.contains(className);\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.countColumns = function(){\n\t\t\t\t\t\/\/ Returns the number of columns (for Icon screen types)\n\t\t\t    \tif(this.getType() == \"icon\"){\n\t\t\t    \t\treturn this.getTable().rows[0].cells.length\n\t\t\t    \t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.disableScroll = function(){\n\t\t\t\t\t\/\/ Disables the defult scrolling of the screen. \n\t\t\t\t\t\/\/ All the content is at fixed position, and content below the fold remains hidden. \n\t\t\t\t\t\/\/ Returns `this`\n\nconsole.log(\"Screen.disableScroll\")\t\t\t\t\t\n\t\t\t\t\tthis.element.getElementsByClassName('items')[0].retrieve('scroll').disable();\n\n\t\t\t\t\t\/\/ To do this using event handler on the screen\n\t\t\t\t\t\/\/ app.phone.addEvent('screen',function(id,screen){\n\t\t\t\t\t\/\/  \tscreen.getElement('.items').retrieve('scroll').disable();\n\t\t\t\t\t\/\/ });\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.enableScroll = function(){\n\t\t\t\t\t\/\/ Enables the defult scrolling of the screen. \n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tconsole.log(\"Screen.enableScroll\",this.element.getElementsByClassName('items')[0].retrieve('scroll').enable());\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.getBackgroundColor = function(){\n\t\t\t\t\t\/\/ Returns the `backgroundColor` of this `Screen`\n\n\t\t\t\t\tvar items = app.findClass(this.element,\"items\")\n\t\t\t\t\n\t\t\t\t\treturn items.style.backgroundColor;\n\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.getData = function(){\n\t\t\t\t\t\/\/ Returns the Data object for this screen\n\n\t\t\t\t\tif(!this.data)\n\t\t\t\t\t\tthis.data = new AppShedData(this.id);\n\n\t\t\t\t\treturn this.data;\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.getIconAbove = function(iconId){\n\t\t\t\t\t\/\/ returns the icon in the row above this icon\n\n\t\t\t\t\tvar icons = this.getIcons();\n\n\t\t\t\t\tfor(var r in icons){\n\t\t\t\t\t\tvar cells = icons[r]\n\n\t\t\t\t\t\tfor(var c in cells){\n\t\t\t\t\t\t\tif(icons[r][c].id == iconId){\n\t\t\t\t\t\t\t\tr = parseInt(r)\n\t\t\t\t\t\t\t\tif(r>0)\n\t\t\t\t\t\t\t\t\treturn icons[(r-1)][c]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.getIconBelow = function(iconId){\n\t\t\t\t\t\/\/ returns the icon in the row below this icon\n\n\t\t\t\t\tvar icons = this.getIcons();\n\t\t\t\t\tvar rowKeys = Object.keys(icons)\n\n\t\t\t\t\tfor(var r in icons){\n\t\t\t\t\t\tvar cells = icons[r]\n\n\t\t\t\t\t\tfor(var c in cells){\n\t\t\t\t\t\t\tif(icons[r][c].id == iconId){\n\t\t\t\t\t\t\t\tr = parseInt(r)\n\t\t\t\t\t\t\t\tif(r < (rowKeys.length-1))\n\t\t\t\t\t\t\t\t\treturn icons[(r+1)][c]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tthis.getIconLeft = function(iconId){\n\t\t\t\t\t\/\/ returns the icon on the left of this icon\n\n\t\t\t\t\tvar icons = this.getIcons();\n\n\t\t\t\t\tfor(var r in icons){\n\t\t\t\t\t\tvar cells = icons[r]\n\n\t\t\t\t\t\tfor(var c in cells){\n\t\t\t\t\t\t\tif(icons[r][c].id == iconId){\n\t\t\t\t\t\t\t\tc = parseInt(c)\n\t\t\t\t\t\t\t\tif(c > 0)\n\t\t\t\t\t\t\t\t\treturn icons[r][(c-1)]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tthis.getIconRight = function(iconId){\n\t\t\t\t\t\/\/ returns the icon on the left of this icon\n\n\t\t\t\t\tvar icons = this.getIcons();\n\n\t\t\t\t\tfor(var r in icons){\n\t\t\t\t\t\tvar cells = icons[r]\n\t\t\t\t\t\tvar cellKeys = Object.keys(cells)\n\n\t\t\t\t\t\tfor(var c in cells){\n\t\t\t\t\t\t\tif(icons[r][c].id == iconId){\n\t\t\t\t\t\t\t\tc = parseInt(c)\n\t\t\t\t\t\t\t\tif(c < (cellKeys.length - 1))\n\t\t\t\t\t\t\t\t\treturn icons[r][(c+1)]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tthis.getIconRowHTML = function(idStart,cols,data){\n\t\t\t\t\t\/\/ returns the HTML for a row of (cols) Icons\n\n\t\t\t\t\tif(!cols)\n\t\t\t\t\t\tcols = this.countColumns();\n\n\t\t\t\t\tif(!idStart)\n\t\t\t\t\t\tidStart = this.getNextId();\n\t\t\t\t\t\n\t\t\t\t\tvar rVal = \"<tr>\"\n\n\t\t\t\t\tfor(var i=0;i<cols;i++){\n\t\t\t\t\t\tvar thisData = ((data && data[i]) ? data[i] : ((data && data['default']) ? data['default'] : null))\n\t\t\t\t\t\trVal += app.getItemHTML(idStart+i,\"icon\",thisData)\n\t\t\t\t\t}\n\t\t\t\t\trVal += \"<\/tr>\"\n\n\t\t\t\t\treturn rVal;\n\t\t\t\t}\n\n\n\t\t\t\tthis.getIcons = function(){\n\t\t\t\t\t\/\/ Returns an object of items\n\t\t\t\t\t\/\/ The object has rows and columns corresponding to the icons on the screen\n\t\t\t\t\t\/\/ Returns `null` if not an `Icons` screen\n\n\t\t\t\t\tif(this.getType() != \"icon\")\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\tthis.icons = {}\n\n\t\t\t\t\ttry{\n\n\t\t\t\t\t\tvar rows = this.getTable().getElementsByTagName(\"tr\")\n\n\t\t\t\t\t\tfor(var r=0;r<rows.length;r++){\n\n\t\t\t\t\t\t\tvar cObj = {};\n\t\t\t\t\t\t\tvar cells = rows[r].getElementsByTagName(\"td\")\n\n\t\t\t\t\t\t\tfor(var c=0;c<cells.length;c++){\n\t\t\t\t\t\t\t\tcObj[c] = app.getItemByDomId(cells[c].id)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.icons[r] = cObj;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Screen.getIcons()\")\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.icons;\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getItems = function(clearCache){\n\t\t\t\t\t\/\/ return all the items on this screen as objects\n\n\t\t\t\t\tif(clearCache)\n\t\t\t\t\t\tthis.clearItemsCache()\n\n\t\t\t\t\t\/\/ by default, use the cached items collection\n\t\t\t\t\tif(Object.keys(this.items).length)\n\t\t\t\t\t\treturn this.items\n\n\n\t\t\t\t\t\/\/ loop through all elements of a certain class name \n\t\t\t\t\tvar elements = this.element.getElementsByClassName(\"item\")\n\n\t\t\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\t\t\t\/\/ ignore new-item-placeholder\n\t\t\t\t\t\tif(!elements[i].classList.contains(\"new-item-placeholder\")){\n\t\t\t\t\t\t\tvar item = app.getItemByDomId(elements[i].id,elements[i])\n\t\t\t\t\t\t\tthis.items[item.id] = item ;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t\n\t\t\t\t\treturn this.items;\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getLocalProperty = function(property){\n\t\t\t\t\t\/\/ Returns the value for `property` from `localStorage` for this screen\n\n\t\t\t\t\treturn this.getLocalStorage()[property];\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getLocalStorage = function(){\n\t\t\t\t\t\/\/ Returns the object stored in localStorage for this screen\n\n\t\t\t\t\tif(typeof localStorage[this.id] == \"undefined\")\n\t\t\t\t\t\tlocalStorage[this.id] = JSON.stringify({ScreenId: this.id, data: []})\n\n\t\t\t\t\treturn JSON.parse(localStorage[this.id]);\n\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getNextId = function(testId){\n\t\t\t\t\t\/\/ Returns the next valid (unused) `id`. Used when creating `Items` dynamically.\n\t\t\t\t\ttry{\n\n\t\t\t\t\t\tif(!testId)\n\t\t\t\t\t\t\ttestId = 1;\n\n\t\t\t\t\t\tvar items = this.getItems();\n\t\t\t\t\t\tvar keys = Object.keys(items);\n\n\t\t\t\t\t\tif(!keys.length)\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\/\/ check if we can use testId \n\t\t\t\t\t\t\t\/\/ otherwise increment and test again\n\n\t\t\t\t\t\t\tvar items = this.getItems();\n\t\t\t\t\t\t\tfor(var i in items){\n\t\t\t\t\t\t\t\tif(items[i].id == testId)\n\t\t\t\t\t\t\t\t\treturn this.getNextId(testId + 1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\/\/ if we get here, testId is not an existing id on this screen \n\t\t\t\t\t\t\treturn testId\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Screen.getNextId()\")\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.getTable = function(){\n\t\t\t\t\t\/\/ Returns the HTML `table` element (for `Icon` screen types) \n\t\t\t    \tif(this.getType() == \"icon\")\n\t\t\t\t\t\treturn this.element.getElementsByTagName(\"table\")[0];\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getTitle = function(str){\n\t\t\t\t\t\/\/ Returns the `Title` of the screen\n\n\t\t\t\t\tvar header = app.findClass(this.element,\"header\")\n\t\t\t\t\treturn app.findClass(header,\"title\").innerText;\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.getType = function(){\n\t\t\t\t\t\/\/ Returns the type of `Screen` (`list`,`icon`,`gallery`,`map`)\n\n\t\t\t\t\tvar classes = this.element.classList\n\n\t\t\t\t\tif(classes.contains(\"list\"))\n\t\t\t\t\t\treturn \"list\"\n\t\t\t\t\tif(classes.contains(\"icon\"))\n\t\t\t\t\t\treturn \"icon\"\n\t\t\t\t\tif(classes.contains(\"gallery\"))\n\t\t\t\t\t\treturn \"gallery\"\n\t\t\t\t\tif(classes.contains(\"map\"))\n\t\t\t\t\t\treturn \"map\"\n\n\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\n\n\t\t\t\tthis.setBackgroundColor = function(color){\n\t\t\t\t\t\/\/ Sets the `backgroundColor` of this `Screen` to `color`\n\n\t\t\t\t\tif(!color || color == 'random')\n\t\t\t\t\t\tcolor = app.getRandomColor();\n\n\t\t\t\t\tvar items = app.findClass(this.element,\"items\")\n\t\t\t\t\n\t\t\t\t\titems.style.backgroundImage = 'none';\n\t\t\t\t\titems.style.backgroundColor = color;\n\n\t\t\t\t\treturn this\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tthis.setBackgroundImage = function(src,method){\n\t\t\t\t\t\/\/ Sets the `backgroundImage` of this `Screen` to `src`. \n\t\t\t\t\t\/\/ Special case: if `src` is omitted, sets the background to the original background image\n\t\t\t\t\t\/\/ Optional `method` determines the layout\n\t\t\t\t\t\/\/ One of: `fit` | `fill` | `stretch` | `center` | `tile`\n\t\t\t\t\t\/\/ `method` defaults to `fit` \n\n\t\t\t\t\tif(!method)\n\t\t\t\t\t\tmethod = 'fill'\n\n\t\t\t\t\tif(!src && this.originalBackgroundImage > \"\")\n\t\t\t\t\t\tsrc = this.originalBackgroundImage;\n\n\t\t\t\t\tvar items = app.findClass(this.element,\"items\")\n\t\t\t\t\t\n\t\t\t\t\t\/\/ first time, save original\n\t\t\t\t\tif(!this.originalBackgroundImage)\n\t\t\t\t\t\tthis.originalBackgroundImage = String(items.style.backgroundImage).replace(\/.*\\s?url\\([\\'\\\"]?\/, '').replace(\/[\\'\\\"]?\\).*\/, '');\n\n\t\t\t\t\titems.style.backgroundImage = \"url('\"+src+\"')\";\n\t\t\t\t\titems.style.backgroundRepeat = \"no-repeat\";\n\t\t\t\t\titems.style.backgroundPosition = \"center center\";\n\n\t\t\t\t\tif(method == 'fill')\n\t\t\t\t\t\titems.style.backgroundSize = \"cover\";\n\t\t\t\t\telse if(method == 'stretch')\n\t\t\t\t\t\titems.style.backgroundSize = \"100% 100%\";\n\t\t\t\t\telse if(method == 'center')\n\t\t\t\t\t\titems.style.backgroundSize = items.style.height+\"px \"+items.style.width+\"px\";\n\t\t\t\t\telse if(method == 'tile'){\n\t\t\t\t\t\titems.style.backgroundSize = items.style.height+\"px \"+items.style.width+\"px\";\n\t\t\t\t\t\titems.style.backgroundRepeat = \"repeat\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\titems.style.backgroundSize = \"contain\";\n\n\n\t\t\t\t\treturn this\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.setLocalProperty = function(property,value){\n\t\t\t\t\t\/\/ Saves the `value` for `property` in `localStorage` for this screen\n\t\t\t\t\t\/\/ Returns `bool true` if successful\n\n\t\t\t\t\tvar obj = this.getLocalStorage()\n\t\t\t\t\tobj[property] = value;\n\n\t\t\t\t\treturn this.setLocalStorage(obj);\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.setLocalStorage = function(obj){\n\t\t\t\t\t\/\/ Saves the `obj` to in localStorage for this screen\n\t\t\t\t\t\/\/ `obj` must have a valid format\n\t\t\t\t\t\/\/    Required: ScreenId (int)\n\t\t\t\t\t\/\/    Required: data (Array)\n\t\t\t\t\t\/\/ Returns `bool true` if the process was successful\n\n\t\t\t\t\ttry{\n\n\t\t\t\t\t\tif(obj && typeof obj === \"object\"){\n\t\t\t\t\t\t\tif(!isNaN(parseInt(obj.ScreenId))){\n\t\t\t\t\t\t\t\tif(Array.isArray(obj.data)){\n\n\t\t\t\t\t\t\t\t\t\/\/ obj passes all the tests\n\t\t\t\t\t\t\t\t\t\/\/ Save to local Storage\n\n\t\t\t\t\t\t\t\t\tlocalStorage[this.id] = JSON.stringify(obj)\n\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(er){\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.setTitle = function(str){\n\t\t\t\t\t\/\/ Sets the `Title` of the screen to `str`.\n\t\t\t\t\t\/\/ Returns the `Screen` object\n\n\t\t\t\t\tvar header = app.findClass(this.element,\"header\")\n\t\t\t\t\tapp.findClass(header,\"title\").innerHTML = str\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.setTitleBackgroundColor = function(color){\n\t\t\t\t\t\/\/ Sets the `backgroundColor` of this `Screen Title`  to `color`\n\n\t\t\t\t\tvar header = app.findClass(this.element,\"header\")\n\n\t\t\t\t\theader.style.backgroundImage = 'none';\n\t\t\t\t\theader.style.backgroundColor = color;\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.toString = function(){\n\t\t\t\t\t\/\/ Returns a string represenation of the `Screen`\n\t\t\t\t\treturn \"AppShed Object: Screen (\"+this.id+\")\"\n\t\t\t\t}\n\n\n\n\n\n\t\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\/\/ Device object.\n\n\t\t\tfunction Device(props) {\n\t\t\t\t\/\/ Class definition for `Device`\n\t\t\t\t\/\/ Create a new `Device` object: `var obj = new Device(props)`\n\t\t\t\t\/\/ Must call `obj.init()` after creating the new `Device`\n\t\t\t\t\/\/ `props` is a JSON object of properties used to instantiate the Device\n\t\t\t\t\/\/ - `props.id` The `id` is mandatory and is used to identify the device.\n\t\t\t\t\/\/ - `props.local_ip` Optional Local IP Address of the device \n\t\t\t\t\/\/ - `props.layoutId` Optional board layout ID (from AppShed IoT Builder)\n\n\n\n\t\t\t\t\/\/ TODO\n\t\t\t\t\/\/ * run checks on localIP to make sure the app is on same subdomain, before using it.\n\t\t\t\t\/\/ * support IOIO calls or aREST calls... and Arduino calls\n\t\t\t\t\/\/ * do setPinMode when required... on calling read\/write methods... and use callback if changing pinMode.\n\n\t\t\t\tthis.address = \"\";\n\t\t\t\tthis.connected = false; \/\/ This value is passed in from the device\n\t\t\t\tthis.deadZoneAdjustment = 0;\n\t\t\t\tthis.id = \"\";\n\t\t\t\tthis.handle_ioBatchCommands = null; \/\/ a handle for the timeout to send batch commands\n\t\t\t\tthis.hardware = \"\"; \/\/ This value is passed in from the device\n\t\t\t\tthis.hasTestedLocalIPFromRemote = false;\n\t\t\t\tthis.info = {}; \/\/ Holds the data returned by `getInfo()`\n\t\t\t\tthis.ioBatchCommands = []; \/\/ Array of commands to be sent as a batch to the device\n\t\t\t\tthis.ioBatchMode = app._ioBatchMode; \/\/ Send IO commands to devices in batches, defaults to `true`\n\t\t\t\tthis.ioBatchTimeout = app._ioBatchTimeout; \/\/ how long to wait while collecting IO commands (e.g. from multiple Blockly commands), Defaults to `100`\n\t\t\t\tthis.ioMaxCommandsPerBatch = app._ioMaxCommandsPerBatch = 4;\n\t\t\t\tthis.isTestingLocalIP = false;\n\t\t\t\tthis.isTestingLocalIPFromRemote = false;\n\t\t\t\tthis.isValidLocalIP = false;\t\n\t\t\t\tthis.isValidLocalIPFromRemote = false;\t\n\t\t\t\tthis.layout = null;\n\t\t\t\tthis.local_ipFromRemote = null; \/\/ Stores the local IP Address received from Remote\n\t\t\t\tthis.name = \"\"; \/\/ This value is passed in from the device\n\t\t\t\tthis.pendingMethods = {analogRead:{},analogWrite:{},digitalRead:{},digitalWrite:{}}; \/\/ An object of objects for each of the IO methods. This holds a flag when a certain method is pending (i.e. AJAX call in process)\n\t\t\t\tthis.properties = props; \/\/ Stores the `props` passed in when the device is instantiated  \n\t\t\t\tthis.pinFormats = {};\n\t\t\t\tthis.pinNames = []; \/\/ An array of pin names (from the layout)\n\t\t\t\tthis.pinModes = {};\n\t\t\t\tthis.pinValues = {};\n\t\t\t\tthis.pinVariableTies = []; \/\/ array of arrays of variables tied to each pin\n\t\t\t\tthis.pollActive = []; \/\/ Array of booleans to indicate if a poll is active for that index\/pin\n\t\t\t\tthis.pollTimeout = 1000;\n\t\t\t\tthis.remoteAddress = \"\";\n\t\t\t\tthis.tiePinsToVariables = false; \/\/ If true, variables in the app are tied to pins by the same name\n\t\t\t\tthis.variables = {}; \/\/ This object is passed in from the device\n\n\n\n\n\t\t\t\tthis.init = function(){\t\n\t\t\t\t\t\/\/ Initialize the object\n\n\t\t\t\t\t\/\/ Set defaults\n\t\t\t\t\tthis.hasTestedLocalIPFromRemote = false;\n\t\t\t\t\tthis.isTestingLocalIP = false;\n\t\t\t\t\tthis.isTestingLocalIPFromRemote = false;\n\t\t\t\t\tthis.isValidLocalIP = false;\t\n\t\t\t\t\tthis.isValidLocalIPFromRemote = false;\t\n\t\t\t\t\tthis.pendingMethods = {analogRead:{},analogWrite:{},digitalRead:{},digitalWrite:{}};\n\n\t\t\t\t\t\/\/ Set dynamic properties\n\t\t\t\t\tthis.id = this.properties.id;\n\t\t\t\t\tthis.key = this.properties.key; \/\/ Optional key for the aREST Pro account\n\n\t\t\t\t\t\/\/ Update remote address\n\t\t\t\t\tthis.updateRemoteAddress();\n\n\n\t\t\t\t\t\/\/ Update the device info using properties passed in\n\t\t\t\t\tthis.updateInfo(this.properties);\n\n\t\t\t\t\t\/\/ Call setup methods\n\t\t\t\t\tthis.configureAddress();\n\t\t\t\t\tthis.configureLayout();\n\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\n\t\t\t\tthis.addBatchCommand = function(format,pin,value,duration){\n\t\t\t\t\t\/\/ Add a command to the batch, and send after a timeout\n\t\t\t\t\t\/\/ This allows multiple commands issued in close succession to be batched up, reducing dealys in multiple API calls\t\t\t\n\n\t\t\t\t\tthis.ioBatchCommands[this.ioBatchCommands.length] = [format,pin,value,duration];\n\n\t\t\t\t\t\/\/ start the timeout if not already running\n\t\t\t\t\tif(!this.handle_ioBatchCommands){\n\t\t\t\t\t\tvar deviceId = this.id;\n\n\t\t\t\t\t\tthis.handle_ioBatchCommands = setTimeout(function(){\n\t\t\t\t\t\t\tapp.getDevice(deviceId).sendCommands().handle_ioBatchCommands = undefined; \n\t\t\t\t\t\t},this.ioBatchTimeout);\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.alertPinValue = function(pin,format){\n\t\t\t\t\t\/\/ Shows a screen alert message with the value of the pin.\n\t\t\t\t\t\/\/ Optional `format` can be `a` (for analog) or `d` (for digital) value (Default: `d`)\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar format = format || 'd';\n\n\t\t\t\t\tif(format == 'd')\n\t\t\t\t\t\tthis.digitalRead(pin,function(data){\n\t\t\t\t\t\t\tappbuilder.app.alert(\"Pin \"+pin+\" = \"+data.return_value)\n\t\t\t\t\t\t});\n\t\t\t\t\tif(format == 'a')\n\t\t\t\t\t\tthis.analogRead(pin,function(data){\n\t\t\t\t\t\t\tappbuilder.app.alert(\"Pin \"+pin+\" = \"+data.return_value)\n\t\t\t\t\t\t});\n\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.analogRead = function(pin, callback) {\n\n\t\t\t\t  \tthis.setPinMode(pin,\"i\").setPinFormat(pin,\"a\");\n\t\t\t\t    jQuery.ajaxq(this.id, {\n\t\t\t\t      url: this.address + '\/analog\/A' + pin +'?key='+this.key,\n\t\t\t\t      crossDomain: true\n\t\t\t\t    }).done(function(data) {\n\t\t\t\t      if(callback != null) callback(data);\n\t\t\t\t    });\n\t\t\t\t    return this;\n\t\t\t\t};\n\n\n\t\t\t\tthis.analogWrite = function(pin, state, noBatch) {\n\t\t\t\t\t\/\/ Send an API call to the device to write an analog `value` to `pin`.\n\t\t\t\t\t\/\/ Optionally If `useBatchCommands` is true the command is cached and sent after a short delay in a batch\n\n\t\t\t\t  \tthis.setPinMode(pin,\"o\").setPinFormat(pin,\"a\");\n\n\t\t\t\t  \tif(noBatch || !this.ioBatchMode){\n\t\t\t\t\t    jQuery.ajaxq(this.id, {\n\t\t\t\t\t      url: this.address + '\/analog\/' + pin + '\/' + state +'?key='+this.key,\n\t\t\t\t\t      crossDomain: true\n\t\t\t\t\t    }).done(function(data) {\n\t\t\t\t\t    });\t\t  \t\t\n\t\t\t\t  \t} else {\n\t\t\t\t  \t\tthis.addBatchCommand(0,pin,state,0);\n\t\t\t\t  \t}\n\t\t\t\t    return this;\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.attachServos = function(attachArray){\n\t\t\t\t\t\/\/ Attach servos to pins\n\t\t\t\t\t\/\/ `attachArray` is a two-dimensional array [x][2]\n\t\t\t\t\t\/\/ For each x, the array has the servo number (e.g. 1) and the pin number (e.g. 7)\n\t\t\t\t\t\n\t\t\t\t\tvar params = \"\"; \/\/ Build up the params to send to the board to attach the required arrays\n\n\t\t\t\t\tfor(var i=0;i<attachArray.length; i++){\n\t\t\t\t\t\t\/\/ for first one add \n\t\t\t\t\t\tif(i>0)\n\t\t\t\t\t\t\tparams += \":\"; \/\/ `:` is the separator between servo definitions\n\t\t\t\t\t\tparams += attachArray[0]+\",\"+attachArray[1];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif(params>\"\")\n\t\t\t\t\t\tthis.callFunction(\"attachServos\",params);\n\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\n\t\t\t\tthis.blink = function(number,duration,noBgChange){\n\t\t\t\t\t\/\/ Blink the built-in LED\n\t\t\t\t\t\/\/ Optional `number` specifies how many blinks (default 5)\n\t\t\t\t\t\/\/ Optional `duration` specifies the time to stay on and off (default 1 second)\n\t\t\t\t\t\/\/ Optional `noBgChange` ensures that the Screen BackgroundColor is not changed during blink\n\n\t\t\t\t\tvar number = number || 5;\n\t\t\t\t\tvar duration = duration || 1000;\n\t\t\t\t\tvar deviceId = this.id;\n\t\t\t\t\tvar noBgChange = noBgChange || false;\n\t\t\t\t\tvar origColor = app.getScreen().getBackgroundColor();\n\n\n\t\t\t\t\tapp.setInterval(function(){\n\t\t\t\t\t\tapp.getDevice(deviceId).setLED(1);\n\t\t\t\t\t\tif(!noBgChange)\n\t\t\t\t\t\t\tapp.getScreen().setBackgroundColor(\"Red\")\n\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\tapp.getDevice(deviceId).setLED(0);\n\t\t\t\t\t\t\tif(!noBgChange)\n\t\t\t\t\t\t\t\tapp.getScreen().setBackgroundColor(\"Gray\")\n\t\t\t\t\t\t},duration)\n\t\t\t\t\t},(duration*2),(duration*2*number))\t\t\n\n\t\t\t\t\t\/\/ Put the Screen Bg back\n\t\t\t\t\tif(!noBgChange)\n\t\t\t\t\t\tsetTimeout(function(){app.getScreen().setBackgroundColor(origColor)},(duration*2*(number + 1)))\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.callFunction = function(called_function, parameters, callback) {\n\t\t\t\t\t\/\/ Calls a function defined on the device\n\n\t\t\t\t\tvar thisURL = this.address + '\/' + called_function + '?params=' + parameters \n\t\t\t\t\tif(this.id != \"local\")\n\t\t\t\t\t\tthisURL += '%26key='+this.key\n\n\t\t\t\t\tjQuery.ajaxq(this.id, {\n\t\t\t\t\t  url: thisURL,\n\t\t\t\t\t  crossDomain: true\n\t\t\t\t\t}).done(function(data) {\n\t\t\t\t\t  if (callback != null) {callback(data)}\n\t\t\t\t\t})\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.cancelPending = function(method,pin,state){\n\t\t\t\t\t\/\/ Cancels the `method`,`pin`,`state` combination from the pending methods.\n\t\t\t\t\t\/\/ Return `this`\n\n\t\t\t\t\tthis.pendingMethods[method][pin+\"_\"+state] = false;\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\n\n\n\t\t\t\tthis.configureAddress = function(){\n\t\t\t\t\t\/\/ Configures which address to use for calls to this device.\n\t\t\t\t\t\/\/ Priority for which `address` to use is given in the following order:\n\t\t\t\t\t\/\/ * `192.168.4.1` for `local` deviceID when using softAP\n\t\t\t\t\t\/\/ * `localIP`\n\t\t\t\t\t\/\/ * `localIPFromRemote`\n\t\t\t\t\t\/\/ * The default cloud webservice\n\n\t\t\t\t\tif(this.id == \"local\"){\n\t\t\t\t\t\tthis.address = \"http:\/\/192.168.4.1\";\n\t\t\t\t\t}\n\t\t\t\t\telse if(this.variables.local_ip && this.variables.local_ip > \"\"){\n\t\t\t\t\t\tif(this.isValidLocalIP)\n\t\t\t\t\t\t\tthis.address = \"http:\/\/\"+this.variables.local_ip;\n\t\t\t\t\t\telse \n\t\t\t\t\t\t\tthis.testLocalIP(); \n\t\t\t\t\t}\n\t\t\t\t\telse if(this.local_ipFromRemote && this.local_ipFromRemote != \"undefined\"){\n\t\t\t\t\t\tif(this.isValidLocalIPFromRemote)\n\t\t\t\t\t\t\tthis.address = this.address = \"http:\/\/\"+this.local_ipFromRemote;\n\t\t\t\t\t\telse \n\t\t\t\t\t\t\tthis.testLocalIP(1); \n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tthis.updateRemoteAddress();\n\t\t\t\t\t\tthis.address = this.remoteAddress;\n\t\t\t\t\t\tif(!this.hasTestedLocalIPFromRemote)\n\t\t\t\t\t\t\tthis.getLocalIPFromRemote();\n\t\t\t\t\t} \n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.configureLayout = function(){\n\t\t\t\t\t\/\/ configures the board layout using the IoT Builder layout settings\n\t\t\t\t\t\/\/ Using a layout makes it much simpler for novice users as they make use of the IoT Builder to configure the board.\n\t\t\t\t\t\/\/ Using a layout is optional. The app can simply set pins using pin numbers directly.\n\n\t\t\t\t\tif(this.properties.layoutId && this.properties.layoutId > \"\"){\n\t\t\t\t\t\t\/\/ attempt to get the board layout\n\t\t\t\t\t\tthis.getLayout();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ remove the layout object to make sure it is not used.\n\t\t\t\t\t\tthis.layout = null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\tthis.digitalRead = function(pin, callback) {\n\t\t\t\t\t\/\/ Reads the digital value of `pin`\n\t\t\t\t\t\/\/ Optional `callback(data)` function is called passing the `data` from the Response\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t  \tthis.setPinMode(pin,\"i\").setPinFormat(pin,\"d\");\n\t\t\t\t    jQuery.ajaxq(this.id, {\n\t\t\t\t      url: this.address + '\/digital\/' + pin +'?key='+this.key,\n\t\t\t\t      crossDomain: true\n\t\t\t\t    }).done(function(data) {\n\t\t\t\t      if(callback != null) callback(data);\n\t\t\t\t    });\n\t\t\t\t    return this;\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.digitalWrite = function(pin, state, noBatch) {\n\t\t\t\t\t\/\/ Sets the digital output on `pin` to `state`\n\t\t\t\t\t\/\/ `state` must be either `1` or `0`\n\t\t\t\t\t\/\/ Optionally If `useBatchCommands` is true the command is cached and sent after a short delay in a batch\n\n\t\t\t\t  \tthis.setPinMode(pin,\"o\").setPinFormat(pin,\"d\");\n\n\t\t\t\t  \tif(noBatch || !this.ioBatchMode){\n\n\t\t\t\t\t\tif(this.isPending(\"digitalWrite\",pin,state)){\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setPending(\"digitalWrite\",pin,state);\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t    jQuery.ajaxq(this.id, {\n\t\t\t\t\t      url: this.address + '\/digital\/' + pin + '\/' + state + '?key='+this.key,\n\t\t\t\t\t      crossDomain: true,\n\t\t\t\t\t      id: this.id\n\t\t\t\t\t    }).always(function(data) {\n\t\t\t\t\t    \tapp.getDevice(this.id).cancelPending(\"digitalWrite\",pin,state);\n\t\t\t\t\t    });\n\t\t\t\t  \t} else {\n\t\t\t\t  \t\tthis.addBatchCommand(1,pin,state,0);\n\t\t\t\t  \t}\n\t\t\t\t    return this;\n\n\t\t\t\t};\n\n\n\n\n\t\t\t\tthis.fade = function(pin,direction,duration,noBgChange){\n\t\t\t\t\t\/\/ Fade `pin` on or off, depending on `direction`.\n\t\t\t\t\t\/\/ Optional `pin` is the pin number (Default: 5, except on RaspberryPi: 7)\n\t\t\t\t\t\/\/ If `direction` is \"on\" or 1, the pin will fade from 0 to 100% \n\t\t\t\t\t\/\/ If `direction` is \"out\", \"off\" or 0, the pin will fade from 100% to 0\n\t\t\t\t\t\/\/ Default `direction` is 1\n\t\t\t\t\t\/\/ Optional `duration` determines how long the fade should take (Default: 5 seconds) \n\t\t\t\t\t\/\/ Optional `noBgChange` ensures that the Screen BackgroundColor is not changed during blink\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar pin = pin || ((this.hardware == \"rpi\")?7:5);\n\t\t\t\t\tvar direction = (direction != null && (direction == 0 || direction == \"off\" || direction == \"out\")) ? 0 : 1;\n\t\t\t\t\tvar deviceId = this.id;\n\n\t\t\t\t\tif(direction){\n\t\t\t\t\t\tthis.analogWrite(pin,0);\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,20)},1000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,40)},2000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,60)},3000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,80)},4000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,100)},5000)\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.analogWrite(pin,100);\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,80)},1000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,60)},2000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,40)},3000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,20)},4000)\n\t\t\t\t\t\tsetTimeout(function(){app.getDevice(deviceId).analogWrite(pin,0)},5000)\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getInfo = function(callback,address) {\n\t\t\t\t\t\/\/ Queries the device to get basic info\n\t\t\t\t\t\/\/ `callback` is the function run when the `data` is returned from the device\n\t\t\t\t\t\/\/ Optional `address` can be passed in, the default address is `this.address`\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar address = address || this.address;\n\n\t\t\t\t\tif(!address || address == \"\" || address == \"undefined\")\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tif(!address.match(\/http\/))\n\t\t\t\t\t\taddress = 'http:\/\/'+address;\n\n\n\t\t\t\t\tjQuery.ajaxq(this.id, {\n\t\t\t\t\t  url: address + '\/info' +'?key='+this.key,\n\t\t\t\t\t  crossDomain: true\n\t\t\t\t\t}).done(function(data) {\n\t\t\t\t\t\ttry{app.getDevice(data.id).updateInfo(data).info = data}\n\t\t\t\t\t\tcatch(er){app.handleError(er,\"Device.getInfo()\")};\n\t\t\t\t\t\tif (callback != null) {callback(data);}\n\t\t\t\t\t}).fail(function(a, textStatus, b){\n\t\t\t\t\t\tif (callback != null) \n\t\t\t\t\t\t\tcallback(a, textStatus, b);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\n\n\n\t\t\t\tthis.getLayout = function(callback) {\n\t\t\t\t\tif(!this.properties.layoutId)\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\tvar address = app._url_boardWithPins + this.properties.layoutId;\n\t\t\t\t\tvar deviceId = this.id;\n\n\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t  url: address,\n\t\t\t\t\t  crossDomain: true\n\t\t\t\t\t}).done(function(data) {\n\t\t\t\t\t  if (callback != null) {callback(data);}\n\t\t\t\t\t  else{app.getDevice(deviceId).setLayout(data)}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\n\n\n\t\t\t\tthis.getLEDPin = function(){\n\t\t\t\t\t\/\/ Returns the `pinNumber` for the built-in LED for this device\n\n\t\t\t\t\t\/\/ Need to know the hardware type - from the \"name\" parameter or \"hardware\" variable\n\t\t\t\t\tif(this.hardware == \"esp8266\")\n\t\t\t\t\t\treturn 0;\n\n\t\t\t\t\tswitch (this.name){\n\t\t\t\t\t\tcase \"ArduinoCytron\":\n\t\t\t\t\t\t\treturn 13; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"esp8266\":\n\t\t\t\t\t\t\treturn 0; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn 1; \n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.getLocalIPFromRemote = function(){\n\t\t\t\t\t\/\/ Try to get the LocalIP from the Remote address;\n\n\t\t\t\t\tthis.hasTestedLocalIPFromRemote = true; \/\/ This is to ensure that the test is only performed once\n\t\t\t\t\tvar address = this.remoteAddress;\n\n\t\t\t\t\tthis.getInfo(function(data){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tif(typeof data.variables.local_ip != \"undefined\"){\n\t\t\t\t\t\t\t\tvar device = app.getDevice({id: data.id})\n\t\t\t\t\t\t\t\tdevice.local_ipFromRemote = data.variables.local_ip\n\t\t\t\t\t\t\t\tdevice.configureAddress();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}catch(er){}\n\t\t\t\t\t},address);\n\t\t\t\t};\n\n\n\t\t\t\tthis.getPin = function(pinNameOrNumber){\n\t\t\t\t\t\/\/ Redundant function \n\t\t\t\t\t\/\/ Returns `this.getPinValue()`\n\n\t\t\t\t\treturn this.getPinValue(pinNameOrNumber);\n\t\t\t\t};\n\n\n\t\t\t\tthis.getPinFormat = function(pinNumber){\n\t\t\t\t\treturn this.pinFormats[pinNumber];\n\t\t\t\t};\n\n\n\t\t\t\tthis.getPinMode = function(pinNumber){\n\t\t\t\t\treturn this.pinModes[pinNumber];\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.getPinValue = function(pinNameOrNumber){\n\t\t\t\t\t\/\/ Returns the value of pin `pinNameOrNumber` \n\t\t\t\t\t\/\/ This function requires the pin value to be polled (regular lookup every x milliseconds)\n\t\t\t\t\t\/\/ If the polling has not started, this function starts the polling loop, but a `null` value is returned\n\t\t\t\t\t\/\/ The polling loop constantly updates the value\n\n\n\n\n\t\t\t\t\t\/\/ presume a pin number passed in\n\t\t\t\t\t\n\t\t\t\t\tvar pinNumber = parseInt(pinNameOrNumber)\n\n\t\t\t\t\t\/\/ if pinNameOrNumber is not a pinNumber\n\t\t\t\t\tif(pinNameOrNumber != pinNumber){\n\t\t\t\t\t\t\/\/ Check to see if we are using a board Layout\n\t\t\t\t\t\tif(this.layout){\n\t\t\t\t\t\t\t\/\/ go through outputs and search for name\n\t\t\t\t\t\t\tvar inputs = this.layout.inputs;\n\n\t\t\t\t\t\t\tfor(var i=0;i<inputs.length;i++){\n\t\t\t\t\t\t\t\tif(inputs[i].variable == pinNameOrNumber){\n\t\t\t\t\t\t\t\t\t\/\/ a named pin matches, so use this pin number\n\t\t\t\t\t\t\t\t\tpinNumber = inputs[i].pin;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\n\n\t\t\t\t\t\/\/ no Layout - or invalid pinName, so check to see if it's a pin number\n\t\t\t\t\tif(isNaN(pinNumber)){\n\t\t\t\t\t\t\/\/ not a number, do nothing\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ make sure this pin is being pollled\n\t\t\t\t\t\tthis.poll(pinNumber);\n\n\t\t\t\t\t\t\/\/ return the value saved for this pin\n\t\t\t\t \t\treturn this.pinValues[pinNumber];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.getVariable = function(variable, callback) {\n\t\t\t\t    jQuery.ajaxq(this.id, {\n\t\t\t\t      url: this.address + '\/' + variable +'?key='+this.key,\n\t\t\t\t      crossDomain: true\n\t\t\t\t    }).done(function(data) {\n\t\t\t\t      callback(data);\n\t\t\t\t    });\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.isPending = function(method,pin,state){\n\t\t\t\t\t\/\/ Returns true if the `method`,`pin`,`state` combination is pending.\n\n\t\t\t\t\ttry{return this.pendingMethods[method][pin+\"_\"+state];}catch(er){}\n\n\t\t\t\t\t\/\/ If error then the key does not exist, so pending must be false because the AJAX wasn't started\n\t\t\t\t\treturn false\n\t\t\t\t};\n\n\n\t\t\t\tthis.motionDriving = function(state,settings){\n\t\t\t\t\t\/\/ Drive the car using motion control (accelerometer)\n\t\t\t\t\t\/\/ (Optional) `state` indicates if you are turning Motion Driving on (1) or off (0), Default: `1`\n\t\t\t\t\t\/\/ (Optional) `settings` passes an object of settings\n\t\t\t\t\t\/\/ returns `this`\n\n\t\t\t\t\tif(state == null)\n\t\t\t\t\t\tstate = 1;\n\n\t\t\t\t\t\/\/ if process not running, start it\n\t\t\t\t\tif(this.handler_motionDriving == null){\n\t\t\t\t\t\tvar deviceId = this.id;\n\t\t\t\t\t\tthis.handler_motionDriving = setTimeout(function(){\n\t\t\t\t\t\t\tapp.getDevice(deviceId).motionDrivingLoop();\n\t\t\t\t\t\t},200)\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tthis.motionDrivingLoop = function(){\n\t\t\t\t\t\/\/ run the motion driving process and keep looping\n\n\t\t\t\t\t\/\/ calibrate PWM\n\n\t\t\t\t\t\/\/ run logo command\n\n\n\t\t\t\t\t\/\/ if process not running, start it\n\t\t\t\t\tvar deviceId = this.id;\n\t\t\t\t\tthis.handler_motionDriving = setTimeout(function(){\n\t\t\t\t\t\tapp.getDevice(deviceId).motionDrivingLoop();\n\t\t\t\t\t},200)\t\t\t\t\n\t\t\t\t}\n\n\n\t\t\t\tthis.motionDrivingSettings = function(){\n\t\t\t\t\t\/\/ Adjusts the settings for motion driving based on the current device accelration properties\n\n\t\t\t\t\tvar dZA = this.deadZoneAdjustment;\n\n\t\t\t\t\tacceleration = app.deviceMotionEvent;\nconsole.log(\"motionDrivingSettings\",acceleration)\n\t\t\t\t\t\/\/document.getElementById(\"vector\").innerHTML =\"vector2\";\n\t\t\t\t\t\/\/acceleration = eventData.accelerationIncludingGravity;\n\t\t\t\t\tvar left = 0;\n\t\t\t\t\tvar right = 0;\n\t\t\t\t\tif (Math.abs(acceleration.y) > 1) { \/\/ back-\/forward\n\t\t\t\t\t\t\tvar speed = acceleration.y * 100;\n\t\t\t\t\t\t\tif (acceleration.y > 0) { \/\/ add 300 to decrease dead zone\n\t\t\t\t\t\t\t\t\t\t\tleft = Math.min(1023, speed + acceleration.x * 40 + dZA);\n\t\t\t\t\t\t\t\t\t\t\tright = Math.min(1023, speed - acceleration.x * 40 + dZA);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tleft = Math.max(-1023, speed + acceleration.x * 40 - dZA);\n\t\t\t\t\t\t\t\t\t\t\tright = Math.max(-1023, speed - acceleration.x * 40 - dZA);\t\t\t\t\t\t \n\t\t\t\t\t\t\t}\n\t\t\t\t\t} else if (Math.abs(acceleration.x) > 1) { \/\/ circle only\n\t\t\t\t\t\t\tvar speed = Math.min(1023, Math.abs(acceleration.x) * 100);\n\t\t\t\t\t\t\tif (acceleration.x > 0) {\n\t\t\t\t\t\t\t\t\tleft = Math.min(1023, speed + dZA);\n\t\t\t\t\t\t\t\t\tright = Math.max(-1023, -speed - dZA); \n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tleft = Math.max(-1023, -speed - dZA);\t\t\n\t\t\t\t\t\t\t\t\tright = Math.min(1023, speed + dZA);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Math.abs(left) > 200 || Math.abs(right) > 200) { \/\/ orig. 100,100\n\t\t\t\t\t\t\tmove_car(left, right);\n\t\t\t\t\t}\n\t\t\t\t\tvar direction = \"stop\";\n\t\t\t\t\t\/\/ if direction is opposite, change sign of +left and +right\n\t\t\t\t\tvar acc_x = Math.round(acceleration.x);\n\t\t\t\t\tvar acc_y = Math.round(acceleration.y);\n\t\t\t\t\tvar acc_z = Math.round(acceleration.z);\n\t\t\t\t\tvar leftD = Math.round(-left);\n\t\t\t\t\tvar rightD = Math.round(-right);\n\n\t\t\t\t\t\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.poll = function(pinNumber,timeout){\n\t\t\t\t\t\/\/ Polls `pinNumber` to constantly check the value;\n\t\t\t\t\t\/\/ The pin value is saved and can be accessed (after a timeout) using `this.getPinValue()`\n\t\t\t\t\t\/\/ Optional `timeout` determines how long to wait before polling again\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar deviceId = this.id;\n\t\t\t\t\tvar timeout = timeout || this.pollTimeout; \/\/ use the default timeout if none supplied\n\n\n\t\t\t\t\t\/\/ Start polling if not currently active\n\n\t\t\t\t\t\/\/ for analog pins, add 100 to the ref\n\t\t\t\t\tif(!this.pollActive[pinNumber]){\n\t\t\t\t\t\tthis.pollActive[pinNumber] = true;\n\t\t\t\t\t\tthis.digitalRead(pinNumber, function(data){\n\t\t\t\t\t\t\tvar device = app.getDevice(deviceId);\n\t\t\t\t\t\t\tdevice.pollActive[pinNumber] = false;\n\t\t\t\t\t\t\tdevice.pinValues[pinNumber] = data.return_value;\n\t\t\t\t\t\t\tdevice.updatedTiedVariables(pinNumber);\n\n\t\t\t\t\t\t\t\/\/ poll again\n\t\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\t\tdevice.poll(pinNumber);\n\t\t\t\t\t\t\t},timeout)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\n\n\n\n\t\t\t\tthis.sendCommands = function(cmds,callback){\n\t\t\t\t\t\/\/ Sends the next batch of commands\n\t\t\t\t\t\/\/ Optional `cmds` arary holds the commands to send, otherwise uses `this.ioBatchCommands`\n\t\t\t\t\t\/\/ `cmds` expect an array of `command` arrays, where each `command` array contains 4 items: `[format,pin,value,duration]`\n\t\t\t\t\t\/\/ Optional `callback` is the callback function - this might be called multiple times if the commands are sent in multiple batches.\n\n\n\t\t\t\t\tvar commands;\n\t\t\t\t\tif(cmds)\n\t\t\t\t\t\tcommands = cmds;\n\t\t\t\t\telse{\n\t\t\t\t\t\tcommands = this.ioBatchCommands.slice(); \/\/ create a copy of the commands\n\t\t\t\t\t\tthis.ioBatchCommands = []; \/\/ empty the commands array (so it can be added to again)\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ send up to maxCommandsPerBatch\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tvar params = \"\";\n\n\t\t\t\t\twhile(commands.length && i < this.ioMaxCommandsPerBatch){\n\t\t\t\t\t\tvar next = commands.shift();\n\t\t\t\t\t\tif(params > \"\")\n\t\t\t\t\t\t\tparams += \":\";\n\t\t\t\t\t\tparams += next[0]+\",\"+next[1]+\",\"+next[2]+\",\"+next[3];\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.callFunction(\"commands\",params,callback);\n\n\t\t\t\t\t\/\/ If some commands still in the array, send those.\n\t\t\t\t\tif(commands.length)\n\t\t\t\t\t\treturn this.sendCommands(commands,callback);\n\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\n\n\n\n\n\t\t\t\tthis.setLayout = function(data){\n\t\t\t\t\t\/\/ sets the `layout` to `data` (expecting a JSON object)\n\n\t\t\t\t\tthis.layout = data;\n\t\t\t\t\treturn this;\n\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.setLED = function(val){\n\t\t\t\t\t\/\/ Sets the built-in LED to `val`\n\t\t\t\t\t\/\/ `val` can be 1\/0 or ON\/OFF or true\/false\n\t\t\t\t\t\/\/ NB: Setting the LED \"ON\" in some cases pulls the Pin down (i.e. \"OFF\")!\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar pinNumber = this.getLEDPin();\n\t\t\t\t\tvar invert = true; \/\/ most boards turn the LED by pulling the pin down.\n\n\t\t\t\t\tif(this.hardware == \"arduino\")\n\t\t\t\t\t\tinvert = false;\n\n\t\t\t\t\t\/\/ Invert the val if required\n\t\t\t\t\tif(invert){\n\t\t\t\t\t\tif(val == 1 || val == true || val == \"true\" || String(val).match(\/on\/i))\n\t\t\t\t\t\t\tval = 0;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tval = 1\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.setPin(pinNumber,val)\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.setMotorDriver = function(type,callback){\n\t\t\t\t\t\/\/ Sets the Motor Driver to `type`;\n\t\t\t\t\t\/\/ Options are: \n\t\t\t\t\t\/\/   `0` (default) Motor Shield\n\t\t\t\t\t\/\/   `1` L298N\n\t\t\t\t\t\/\/   `2` L9110\n\n\n\t\t\t\t\treturn this.callFunction(\"setMotorDriver\", type, callback) \n\n\t\t\t\t}\n\n\n\t\t\t\tthis.setPending = function(method,pin,state){\n\t\t\t\t\t\/\/ Sets a flag to indicate that a `method`,`pin`,`state` combination is pending (i.e. the AJAX request is running)\n\t\t\t\t\t\/\/ This is used to stop duplicate requests being sent continuously thereby overloading the device\n\t\t\t\t\t\/\/ `method` must be one of:\n\t\t\t\t\t\/\/ * `analogRead`\n\t\t\t\t\t\/\/ * `analogWrite`\n\t\t\t\t\t\/\/ * `digitalRead`\n\t\t\t\t\t\/\/ * `digitalWrite`\n\t\t\t\t\t\/\/ Return `this`\n\n\t\t\t\t\t\/\/ Create a key using pin_state\n\t\t\t\t\tthis.pendingMethods[method][pin+\"_\"+state] = true;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.setPin = function(pinNameOrNumber,val){\n\t\t\t\t\t\/\/ Sets the pin number `pinNameOrNumber` to `val`\n\t\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\t\t\/\/ presume a pin number passed in\n\t\t\t\t\t\n\t\t\t\t\tvar pinNumber = parseInt(pinNameOrNumber)\n\n\t\t\t\t\t\/\/ if pinNameOrNumber is not a pinNumber\n\t\t\t\t\tif(pinNameOrNumber != pinNumber){\n\t\t\t\t\t\t\/\/ Check to see if we are using a board Layout\n\t\t\t\t\t\tif(this.layout){\n\t\t\t\t\t\t\t\/\/ go through outputs and search for name\n\t\t\t\t\t\t\tvar outputs = this.layout.outputs;\n\n\t\t\t\t\t\t\tfor(var i=0;i<outputs.length;i++){\n\t\t\t\t\t\t\t\tif(outputs[i].variable == pinNameOrNumber){\n\t\t\t\t\t\t\t\t\t\/\/ a named pin matches, so use this pin number\n\t\t\t\t\t\t\t\t\tpinNumber = outputs[i].pin;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\n\n\t\t\t\t\t\/\/ no Layout - or invalid pinName, so check to see if it's a pin number\n\t\t\t\t\tif(isNaN(pinNumber)){\n\t\t\t\t\t\t\/\/ not a number, do nothing\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\/\/ if val is boolean then use digital output\n\t\t\t\t\t\tif(val == true || val == \"true\" || String(val).match(\/on\/i))\n\t\t\t\t\t\t\tthis.digitalWrite(pinNumber,1)\n\t\t\t\t\t\telse if(val == false || val == \"false\" || String(val).match(\/of\/i))\n\t\t\t\t\t\t\tthis.digitalWrite(pinNumber,0)\n\t\t\t\t\t\telse if(val == 1 || val == 0){ \/\/ special case: 1\/0 might be digital or analog. \n\t\t\t\t\t\t\t\/\/ Presume digital unless analog specified.\n\t\t\t\t\t\t \tif(this.getPinFormat(pinNumber) == \"a\")\n\t\t\t\t\t\t \t\tthis.analogWrite(pinNumber,val)\n\t\t\t\t\t\t \telse\n\t\t\t\t\t\t \t\tthis.digitalWrite(pinNumber,val)\n\t\t\t\t\t\t} else { \/\/ everything else presume analog\n\t\t\t\t\t\t\tthis.analogWrite(pinNumber,val)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\n\n\n\t\t\t\tthis.setPinFormat = function(pinNumber,format){\n\t\t\t\t\t\/\/ Sets the format of `pinNumber` to `format`\n\t\t\t\t\t\/\/ `format` must be either `d` for digital or `a` for analog\n\n\t\t\t\t\tthis.pinFormats[pinNumber] = format;\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\t\t\t\t\n\t\t\t\tthis.setPinMode = function(pin, state) {\n\t\t\t\t  \t\/\/ Set the mode of `pin` to `state`\n\t\t\t\t  \t\/\/ `state` must be either `i` for input or `o` for output.\n\n\t\t\t\t  \t\/\/ Skip the AJAX call if already set\n\t\t\t\t  \tif(this.pinModes[pin] == state)\n\t\t\t\t  \t\treturn this;\n\n\n\t\t\t\t    jQuery.ajaxq(this.id, {\n\t\t\t\t\t\turl: this.address + '\/mode\/' + pin + '\/'+state+'?key='+this.key,\n\t\t\t\t    \tcrossDomain: true\n\t\t\t\t    }).done(function(data) {\n\t\t\t\t\t\tvar device = app.getDevice(data.id)\n\t\t\t\t\t\tdevice.pinModes[pin] = state;\n\n\t\t\t\t\t  \t\/\/ If all variables tied to pins, then tie this if input\n\t\t\t\t\t  \tif( device.tiePinsToVariables && state == \"i\"){\n\t\t\t\t\t  \t\tdevice.tie(pin,pin); \/\/ use the pin number as the name of the variable\n\t\t\t\t\t  \t\tdevice.poll(pin);\n\t\t\t\t\t  \t}\n\n\t\t\t\t    });\n\n\t\t\t\t    return this;\n\t\t\t\t};\n\n\n\n\t\t\t\tthis.setRGB = function(color,pins){\n\t\t\t\t\t\/\/ Sets an RGB LED to `color`\n\t\t\t\t\t\/\/ Optional `pins`  specifies the pins to use, default is 5,6,7 for r,g,b\n\t\t\t\t\t\/\/ `color` can be a HEX color or an object with properties `r,g,b` specifying a value 0-255\n\t\t\t\t\t\/\/ `pins` is an object with properties `r,g,b` specifying the pin numbers\n\t\t\t\t\t\/\/ returns `this`\n\n\t\t\t\t\tif(typeof color == \"string\")\n\t\t\t\t\t\tcolor = app.toRGB(color)\n\n\t\t\t\t\tif(!pins)\n\t\t\t\t\t\tpins = {r: 5, g: 6, b: 7};\n\n\t\t\t\t\tthis.analogWrite(pins.r,color.r);\n\t\t\t\t\tthis.analogWrite(pins.g,color.g);\n\t\t\t\t\tthis.analogWrite(pins.b,color.b);\n\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t\tthis.testLocalIP = function(fromRemote){\n\t\t\t\t\t\/\/ Tests `this.local_ip` to determine if the app can use it instead of the Remote address\n\t\t\t\t\t\/\/ Optional: If `fromRemote` is true it will test `this.local_ipFromRemote`\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tif(fromRemote){\n\t\t\t\t\t\t\/\/ If already testing, return\n\t\t\t\t\t\tif(this.isTestingLocalIPFromRemote)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\tthis.isTestingLocalIPFromRemote = true;\n\t\t\t\t\t\tthis.isValidLocalIPFromRemote = false;\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(this.isTestingLocalIP)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\tthis.isTestingLocalIP = true;\n\t\t\t\t\t\tthis.isValidLocalIP = false;\t\n\t\t\t\t\t}\n\n\t\t\t\t\tvar originalID = this.id;\n\n\t\t\t\t\tvar testIP = this.variables.local_ip;\n\t\t\t\t\tif(fromRemote)\n\t\t\t\t\t\ttestIP = this.local_ipFromRemote;\n\n\n\t\t\t\t\t\/\/ Query the IP and see if it is valid\n\t\t\t\t\tthis.getInfo(function(data){\n\n\t\t\t\t\t\tif(data.id == originalID){\n\t\t\t\t\t\t\tif(fromRemote)\n\t\t\t\t\t\t\t\tapp.getDevice(data.id).isValidLocalIPFromRemote = true;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tapp.getDevice(data.id).isValidLocalIP = true;\n\t\t\t\t\t\t\tapp.getDevice(data.id).configureAddress()\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t    },testIP);\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tthis.tie = function(pinNameOrNumber,variable){\n\t\t\t\t\t\/\/ Ties the pin `pinNameOrNumber` to a `variable`\n\t\t\t\t\t\/\/ The variable is updated every time the pin is polled\n\t\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\t\t\/\/ presume a pin number passed in\n\t\t\t\t\t\n\t\t\t\t\tvar pinNumber = parseInt(pinNameOrNumber)\n\n\t\t\t\t\t\/\/ if pinNameOrNumber is not a pinNumber\n\t\t\t\t\tif(pinNameOrNumber != pinNumber){\n\t\t\t\t\t\t\/\/ Check to see if we are using a board Layout\n\t\t\t\t\t\tif(this.layout){\n\t\t\t\t\t\t\t\/\/ go through inputs and search for name\n\t\t\t\t\t\t\tvar inputs = this.layout.inputs;\n\n\t\t\t\t\t\t\tfor(var i=0;i<inputs.length;i++){\n\t\t\t\t\t\t\t\tif(inputs[i].variable == pinNameOrNumber){\n\t\t\t\t\t\t\t\t\t\/\/ a named pin matches, so use this pin number\n\t\t\t\t\t\t\t\t\tpinNumber = inputs[i].pin;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\n\n\t\t\t\t\t\/\/ no Layout - or invalid pinName, so check to see if it's a pin number\n\t\t\t\t\tif(isNaN(pinNumber)){\n\t\t\t\t\t\t\/\/ not a number, do nothing\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ Check if any ties yet for this pin\n\t\t\t\t\t\tif(!this.pinVariableTies[pinNumber])\n\t\t\t\t\t\t\tthis.pinVariableTies[pinNumber] = [];\n\n\t\t\t\t\t\t\/\/ add the variable to the array of ties\n\t\t\t\t\t\tthis.pinVariableTies[pinNumber].push(variable);\n\t\t\t\t\t\tthis.poll(pinNumber);\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\t\t\t\tthis.tieAllPinsToVariables = function(){\n\t\t\t\t\t\/\/ Ties all input pins to variables by the same name\n\t\t\t\t\t\/\/ Requires a layout to be specified for the device (to determine which pins are inputs)\n\t\t\t\t\t\/\/ Allows for easy moniotring of pins: simply create form fields (variables) with the same names as the pins\n\t\t\t\t\t\/\/ Also allows you to name variables using the `pinNumber`, \n\t\t\t\t\t\/\/ but with multiple connected devices using `pinNumber` will cause conflicts.\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tthis.tiePinsToVariables = true; \/\/ remember this setting, might need to tie later (e.g. in setPinMode())\n\n\n\t\t\t\t\tif(this.layout){\n\t\t\t\t\t\t\/\/ go through inputs \n\t\t\t\t\t\tvar inputs = this.layout.inputs;\n\n\t\t\t\t\t\tfor(var i=0;i<inputs.length;i++){\n\t\t\t\t\t\t\tthis.tie(inputs[i].pin,inputs[i].variable);\n\t\t\t\t\t\t\tthis.poll(inputs[i].pin);\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tthis.toString = function(){\n\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\tid: this.id,\n\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\thardware: this.hardware,\n\t\t\t\t\t\tconnected: this.connected,\n\t\t\t\t\t\tvariables: this.variables\n\t\t\t\t\t})\n\t\t\t\t}\n\n\n\t\t\t\tthis.updateInfo = function(data){\n\t\t\t\t\t\/\/ Update the basic Info of the device using `data`\n\n\t\t\t\t\tif(data){\n\t\t\t\t\t\tif(data.name)\n\t\t\t\t\t\t\tthis.name = data.name;\n\t\t\t\t\t\tif(data.connected)\n\t\t\t\t\t\t\tthis.connected = data.connected;\n\t\t\t\t\t\tif(data.hardware)\n\t\t\t\t\t\t\tthis.hardware = data.hardware;\n\t\t\t\t\t\tif(data.variables){\n\t\t\t\t\t\t\tthis.variables = data.variables;\n\t\t\t\t\t\t\tif(data.variables.analogValues){\n\t\t\t\t\t\t\t\tthis.A0 = parseInt(data.variables.analogValues)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(data.variables.digitalValues){\n\t\t\t\t\t\t\t\tvar vals = data.variables.digitalValues.split(\",\")\n\t\t\t\t\t\t\t\tfor(var i=0;i<vals.length;i++){\n\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\tthis[\"D\"+i] = parseInt(vals[i]);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}catch(er){}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\/\/ Special cases (These might be passed in props when instantiating)\n\t\t\t\t\t\tif(data.local_ip)\n\t\t\t\t\t\t\tthis.variables.local_ip = data.local_ip;\n\t\t\t\t\t\tif(data.isValidLocalIP)\n\t\t\t\t\t\t\tthis.isValidLocalIP = data.isValidLocalIP;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.updateProperties = function(props){\n\t\t\t\t\tvar addressChanges = false;\n\t\t\t\t\tvar layoutChanges = false;\n\n\n\t\t\t\t\t\/\/ has the localIP changed?\n\t\t\t\t\tif((typeof props.local_ip == \"string\") && \n\t\t\t\t\t\t(!this.variables.local_ip || this.variables.local_ip != props.local_ip)\n\t\t\t\t\t){\n\n\t\t\t\t\t\t\/\/ save the local_ip in variables\n\t\t\t\t\t\tthis.variables.local_ip = props.local_ip;\n\t\t\t\t\t\tthis.isTestingLocalIP = false;\n\t\t\t\t\t\tthis.isValidLocalIP = false;\t\n\t\t\t\t\t\taddressChanges = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ has the layout changed\n\t\t\t\t\tif( (props.layoutId && props.layoutID != this.properties.layoutId) ||\n\t\t\t\t\t\t!props.layoutId || props.layoutId == \"\"\t)\n\t\t\t\t\t\tlayoutChanges = true;\n\n\t\t\t\t\t\/\/ update each property using values passed in\n\t\t\t\t\tfor(var k in props)\n\t\t\t\t\t\tthis.properties[k] = props[k]\n\n\t\t\t\t\tif(props.key)\n\t\t\t\t\t\tthis.key = props.key;\n\t\t\t\t\tthis.updateRemoteAddress();\n\n\t\t\t\t\tif(addressChanges)\n\t\t\t\t\t\tthis.configureAddress();\n\n\t\t\t\t\tif(layoutChanges)\n\t\t\t\t\t\tthis.configureLayout();\n\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\n\t\t\t\tthis.updateRemoteAddress = function(){\n\t\t\t\t\tthis.remoteAddress = \"http:\/\/cors.appshed.com\/?u=https:\/\/cloud.arest.io\/\"+this.id;\n\t\t\t\t\tif(this.key)\n\t\t\t\t\t\tthis.remoteAddress = \"http:\/\/cors.appshed.com\/?u=https:\/\/pro.arest.io\/\"+this.id;\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.updatedTiedVariables = function(pinNumber){\n\t\t\t\t\t\/\/ Update all variables tied to a pin with the current value\n\t\t\t\t\t\/\/ Return `this`\n\n\n\t\t\t\t\tif(this.pinVariableTies[pinNumber] && this.pinVariableTies[pinNumber].length){\n\t\t\t\t\t\tfor(var i=0;i<this.pinVariableTies[pinNumber].length;i++){\n\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\tapp.setVariable(this.pinVariableTies[pinNumber][i],this.pinValues[pinNumber])\n\t\t\t\t\t\t\t}catch(er){}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\n\n\n\n\n\t\t\t\t\/\/ ************************************************************\n\t\t\t\t\/\/ We must call init() on the Device\n\t\t\t\t\/\/ ************************************************************\n\t\t\t\tthis.init();\n\t\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\/\/ Data object.\n\n\n\t\t\t\n\t\t\tfunction AppShedData(idOrClassName) {\n\t\t\t\t\/\/ Class definition for Data Object\n\t\t\t\t\/\/ [not implemented] Optional `idOrClassName` specifies which data to retrieve\n\t\t\t\t\/\/ Defaults to the data on the current screen.\n\n\n\t\t\t\tthis.idOrClassName = idOrClassName;\n\n\t\t\t\tthis.type = \"Data Object\";\n\t\t\t\tthis.emailKey = \"43kjbv934kjds9fwf34erf098uerj8nj63no7r94m4773jk\"; \/\/ secret key to avoid abuse of the email service\n\n\n\n\n\n\t\t\t\tthis.avg = function(variable){\n\t\t\t\t\t\/\/ Return the average of the values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\n\t\t\t\t\treturn app.stats.avg(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.clearData = function(){\n\t\t\t\t\t\/\/ Clears the data \n\t\t\t\t\t\/\/ returns `bool true` if successful\n\n\t\t\t\t\treturn this.getScreen().setLocalProperty(\"data\",[]);\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.count = function(variable,notEmpty){\n\t\t\t\t\t\/\/ Return the count of values for `variable`\n\t\t\t\t\t\/\/ Optional `bool notEmpty` specifies that only non-empty values should be counted\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\tvar count = 0;\n\t\t\t\t\tthis.getData().forEach(function(el){\n\t\t\t\t\t\tif(notEmpty){\n\t\t\t\t\t\t\tif(el[variable] > \"\")\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t})\t\n\t\t\t\t\treturn count;\t\n\t\t\t\t}\n\n\n\t\t\t\tthis.countNumbers = function(variable){\n\t\t\t\t\t\/\/ Return the count of numeric values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\n\t\t\t\t\treturn this.getNumbers(variable).length;\t\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\n\t\t\t\tthis.email = function(to,from,subject,body,arg_callback){\n\t\t\t\t\t\/\/ Email the data on the current `Screen`\n\t\t\t\t\t\/\/ Optional arguments `to,from,subject,body,callback`\n\t\t\t\t\t\/\/ It is also possible to pass in form fields for `to,from,subject,body`\n\t\t\t\t\t\/\/ Form fields will take precedence over arguments for `to,from,subject,body` \n\t\t\t\t\t\/\/ Overload: the callback function can be passed as any of the arguments\n\t\t\t\t\t\/\/ e.g. email('to',callback) is valid \n\n\t\t\t\t\tvar callback;\n\t\t\t\t\tvar fieldData = \"\";\n\n\t\t\t\t\tif(typeof to == 'function'){\n\t\t\t\t\t\tcallback = to;\n\t\t\t\t\t\tto = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof from == 'function'){\n\t\t\t\t\t\tcallback = from;\n\t\t\t\t\t\tfrom = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof subject == 'function'){\n\t\t\t\t\t\tcallback = subject;\n\t\t\t\t\t\tsubject = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof body == 'function'){\n\t\t\t\t\t\tcallback = body;\n\t\t\t\t\t\tbody = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof arg_callback == 'function')\n\t\t\t\t\t\tcallback = arg_callback;\n\n\n\t\t\t\t\tapp.showLoader(10000);\n\n\n\t\t\t\t\tvar fData = new FormData();\n\n\t\t\t\t\t\/\/ Add the email Key\n\t\t\t\t\tfData.append('key',this.emailKey);\n\n\n\t\t\t\t\t\/\/ look for input (text, checkbox, radio), textarea , .item.select .selected, .item.picker .picked\n\t\t\t\t\tjQuery(app._formItemsCSSSelector).each(function( index ) {\n\t\t\t\t\t\tvar el = (this);\n\t\t\t\t\t\tvar data = app.getVariable(el.dataset.variable);\n\n\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tif(el.type == \"file\"){\n\t\t\t\t\t\t\t\tdata = el.files[0];\n\t\t\t\t\t\t\t\tfData.append(el.dataset.variable,data);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfieldData += el.dataset.variable + \" = \" + data + \"\\n\"; \n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\/\/ Check the arguments and override with form data if present\n\t\t\t\t\t\t\tif(el.dataset.variable == \"to\" && data > \"\")\n\t\t\t\t\t\t\t\tto = data + ((to)?(\",\" + to):\"\");\n\t\t\t\t\t\t\tif(el.dataset.variable == \"from\" && data > \"\")\n\t\t\t\t\t\t\t\tfrom = data + ((from)?(\",\" + from):\"\");\n\t\t\t\t\t\t\tif(el.dataset.variable == \"subject\" && data > \"\")\n\t\t\t\t\t\t\t\tsubject = data + ((subject)?(\" \" + subject):\"\");\n\t\t\t\t\t\t\tif(el.dataset.variable == \"body\" && data > \"\")\n\t\t\t\t\t\t\t\tbody = data + ((body)?(\" \" + body):\"\");\n\n\n\t\t\t\t\t\t}catch(er) {\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tfieldData = \"\\n\\n\\n__________________________\\n\\nForm Fields\\n__________________________\\n\\n\"+fieldData;\n\n\n\t\t\t\t\t\/\/ add the arguments \n\t\t\t\t\tfData.append('to',(to?to:\"\"));\n\t\t\t\t\tfData.append('from',(from?from:\"\"));\n\t\t\t\t\tfData.append('subject',(subject?subject:\"\"));\n\t\t\t\t\tfData.append('body',(body?body:\"\")+fieldData);\n\n\n\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\n\t\t\t\t\t\turl: \"https:\/\/appshed.us\/extensions\/form\/email.php\", \/\/ Url to which the request is send\n\t\t\t\t\t\ttype: \"POST\",             \/\/ Type of request to be send, called as method\n\t\t\t\t\t\tdata: fData,\n\t\t\t\t\t\tcontentType: false,       \/\/ The content type used when sending data to the server.\n\t\t\t\t\t\tcache: false,             \/\/ To unable request pages to be cached\n\t\t\t\t\t\tprocessData:false        \/\/ To send DOMDocument or non processed data file it is set to false\n\t\t\t\t\t}).done(function(data) {\n\t\t\t\t\t\t\tif(callback)\n\t\t\t\t\t\t\t\tcallback(data);\n\t\t\t\t\t}).always(function(data) {\n\t\t\t\t\t\t\tapp.hideLoader();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tthis.emailData = function(to,from,subject,body,arg_callback){\n\t\t\t\t\t\/\/ Email all the saved data \n\n\t\t\t\t\tvar data = this.getData();\n\n\t\t\t\t\tvar body = \"\\n__________________________\\n\\nSaved Data\\n__________________________\\n\\n\";\n\t\t\t\t\t\n\t\t\t\t\tfor(var i=0;i<data.length;i++){\n\t\t\t\t\t\tvar keys = Object.keys(data[i])\n\t\t\t\t\t\tbody += \"\\n\\n\" + (i+1)+\":\\n\\n\";\n\t\t\t\t\t\tfor(var k=0;k<keys.length;k++){\n\t\t\t\t\t\t\tbody += keys[k] + \" = \" +data[i][keys[k]] + \"\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.email(to,from,subject,body,arg_callback)\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getData = function(selectors,filters){\n\t\t\t\t\t\/\/ Returns the saved data as an array of objects\n\t\t\t\t\t\/\/ Format: \n\t\t\t\t\t\/\/\t[\n\t\t\t\t\t\/\/\t  {\n\t\t\t\t\t\/\/\t\tvariable1: \"value1\",\n\t\t\t\t\t\/\/\t\tvariable2: \"value2\",\n\t\t\t\t\t\/\/\t\t...\n\t\t\t\t\t\/\/\t  },\n\t\t\t\t\t\/\/\t  ...\n\t\t\t\t\t\/\/\t]\n\t\t\t\t\t\/\/ Optional `selectors` is an array of variable names to be included in the returned data\n\t\t\t\t\t\/\/   Example: `[\"textbox\",\"number\"]`\n\t\t\t\t\t\/\/ Optional `filters` specifies any filter criteria\n\t\t\t\t\t\/\/ `filters` is an array of filter objects in the format:\n\t\t\t\t\t\/\/   [\n\t\t\t\t\t\/\/      {\n\t\t\t\t\t\/\/\t\t\tvariable: \"name\", \t\/\/ the variable to apply the filter on\n\t\t\t\t\t\/\/\t\t\tcomparison: \"==,!=,<>,>,<,>=,<=\", \n\t\t\t\t\t\/\/\t\t\tvalue: \"xxx\",\t\t\/\/ alphanumeric value\n\t\t\t\t\t\/\/\t\t\tlogic: \"AND|OR\"\t\t\/\/ optional, determines how to join multiple filters\n\t\t\t\t\t\/\/\t\t} \n\t\t\t\t\t\/\/   ]\n\t\t\t\t\t\/\/ Example: `filters' = [{variable:\"textbox\",comparison:\"!=\",value:\"some text\", logic:\"AND\"},{variable:\"number\",comparison:\"=\"}]\n\n\n\t\t\t\t\tvar data = this.getScreen().getLocalProperty(\"data\");\n\n\n\t\t\t\t\t\/\/ Get Selectors from the current Item \n\t\t\t\t\tif(!selectors)\n\t\t\t\t\t\tselectors = [];\n\t\t\t\t\ttry{\n\t\t\t\t\t\tjQuery('#data_select'+app._currentItemId+' input').each(function(){\n\t\t\t\t\t\t\t\/\/ remove \"data_select_variable_\" from the input name\n\t\t\t\t\t\t\tif(this.checked)\n\t\t\t\t\t\t\t\tselectors.push(this.name.replace(\/data_select_variable_\/,\"\")); \n\t\t\t\t\t\t})\n\n\t\t\t\t\t}catch(er){}\n\n\n\n\t\t\t\t\t\/\/ If the current Item is a `data_filter` then add the filter conditions\n\t\t\t\t\ttry{\n\t\t\t\t\t\tif(app.getItem().containsClass('data_filter')){\n\t\t\t\t\t\t\tvar variable = jQuery('#item'+app._currentItemId+' .data_filter_variable select').val();\n\t\t\t\t\t\t\tvar comparison = jQuery('#item'+app._currentItemId+' .data_filter_comparison select').val();\n\t\t\t\t\t\t\tvar value = jQuery('#item'+app._currentItemId+' .data_filter_value input').val();\n\n\t\t\t\t\t\t\tif(variable > \"\" && comparison > \"\"){\n\t\t\t\t\t\t\t\tif(!filters)\n\t\t\t\t\t\t\t\t\tfilters = [];\n\n\t\t\t\t\t\t\t\tfilters.push({variable: variable, comparison: comparison,value: value});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}catch(er){}\n\n\n\t\t\t\t\tif(filters){\n\t\t\t\t\t\tfor(var f=0;f<filters.length;f++){\n\t\t\t\t\t\t\tvar filter = filters[f];\n\n\t\t\t\t\t\t\t\/\/ Create an array of data conforming to this filter\n\t\t\t\t\t\t\tvar filteredData = [];\n\n\t\t\t\t\t\t\tfor(var i=0;i<data.length;i++){\n\n\t\t\t\t\t\t\t\t\/\/ find out which variable this filter applies to \n\t\t\t\t\t\t\t\tvar vars = Object.keys(data[i]);\n\t\t\t\t\t\t\t\tvar index = vars.indexOf(filter.variable);\n\n\t\t\t\t\t\t\t\tif(index != -1){\n\n\n\t\t\t\t\t\t\t\t\tvar result;\n\t\t\t\t\t\t\t\t\tvar str;\n\t\t\t\t\t\t\t\t\t\/\/ fix single = \n\t\t\t\t\t\t\t\t\tif(filter.comparison == \"=\")\n\t\t\t\t\t\t\t\t\t\tfilter.comparison = \"==\";\n\n\t\t\t\t\t\t\t\t\tif(isNaN(data[i][vars[index]]) || isNaN(filter.value))\n\t\t\t\t\t\t\t\t\t\tstr = \"result = ('\"+data[i][vars[index]]+\"' \"+filter.comparison+\" '\"+filter.value+\"')\";\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tstr = \"result = (\"+data[i][vars[index]]+\" \"+filter.comparison+\" \"+filter.value+\")\";\n\n\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\teval(str);\n\t\t\t\t\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t\t\t\t\tapp.handleError(er,\"Data.getData eval filter \"+str)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(result){\n\t\t\t\t\t\t\t\t\t\tfilteredData.push(data[i]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\/\/ replace the data with this data (presume AND join)\n\t\t\t\t\t\t\tdata = filteredData;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\t\/\/ Selectors\n\t\t\t\t\tvar selectedData = data;\n\n\t\t\t\t\tif(selectors && selectors.length){\n\t\t\t\t\t\tfor(var i=0;i<selectedData.length;i++){\n\t\t\t\t\t\t\tvar keys = Object.keys(selectedData[i])\n\t\t\t\t\t\t\tfor(var k=0;k<keys.length;k++){\n\t\t\t\t\t\t\t\t\/\/ delete the key if not in selectors\n\t\t\t\t\t\t\t\tif(selectors.indexOf(keys[k]) == -1)\n\t\t\t\t\t\t\t\t\tdelete selectedData[i][keys[k]]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn selectedData;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.getFirstVariable = function(){\n\t\t\t\t\t\/\/ Return the name of the first `variable` in the data\n\t\t\t\t\t\/\/ If there is no saved data, it will return null\n\n\t\t\t\t\treturn this.getVariables()[0];\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\n\n\n\n\n\t\t\t\tthis.getNumbers = function(variable){\n\t\t\t\t\t\/\/ Return an array of the numeric values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\n\t\t\t\t\tvar arr = [];\n\t\t\t\t\t\n\t\t\t\t\tthis.getData().forEach(function(el){\n\t\t\t\t\t\tif(!isNaN(el[variable]) && String(el[variable]).length > 0)\n\t\t\t\t\t\t\tarr.push(Number(el[variable]))\n\t\t\t\t\t})\t\n\t\t\t\t\t\n\t\t\t\t\treturn arr;\n\t\t\t\t\t\n\t\t\t\t}\n\n\n\t\t\t\tthis.getScreen = function(){\n\t\t\t\t\t\/\/ Returns the `Screen` for this data\n\t\t\t\t\t\/\/ Defaults to the current screen\n\t\t\t\t\t\t\n\t\t\t\t\treturn app.getScreen(this.idOrClassName);\n\n\t\t\t\t}\n\t\t\t\t\n\n\n\n\t\t\t\tthis.getVariables = function(){\n\t\t\t\t\t\/\/ Returns an array of `variables` in the data\n\n\t\t\t\t\tvar variables = [];\n\n\t\t\t\t\tthis.getData().forEach(function(el){\n\t\t\t\t\t\tvariables = variables.concat(Object.keys(el))\n\t\t\t\t\t})\n\n\t\t\t\t\t\/\/ get unique variable names\n\t\t\t\t\tvariables = variables.filter(function(value, index, self) { \n    \t\t\t\t\treturn self.indexOf(value) === index;\n\t\t\t\t\t})\n\n\t\t\t\t\treturn variables;\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.hideData = function(){\n\t\t\t\t\t\/\/ Hide the data that was shown with `showData()`\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar scn = this.getScreen();\n\n\t\t\t\t\tif(jQuery('#data-'+scn.id).length)\n\t\t\t\t\t\tjQuery('#data-'+scn.id).remove();\n\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.insert = function(thisData){\n\t\t\t\t\t\/\/ Saves the provided `thisData`\n\t\t\t\t\t\/\/ `thisData` can be an array (of data objects) or a single data object\n\t\t\t\t\t\/\/ The format of the data object is:\n\t\t\t\t\t\/\/ {\n\t\t\t\t\t\/\/\t\tvariable1: value1,\t\n\t\t\t\t\t\/\/\t\tvariable2: value2,\n\t\t\t\t\t\/\/\t\t...\t\n\t\t\t\t\t\/\/\t}\n\t\t\t\t\t\/\/ Example as an array:\n\t\t\t\t\t\/\/ \t\t[{dataobject1},{dataobject2},...]\n\t\t\t\t\t\/\/ This function allows for programatic insertion of data, as opposed to this.save() which saves form input.\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tdata = this.getData();\n\n\t\t\t\t\tif(Array.isArray(thisData)){\n\t\t\t\t\t\tfor(var i=0;i<thisData.length;i++)\n\t\t\t\t\t\t\tdata.push(thisData[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata.push(thisData);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getScreen().setLocalProperty(\"data\",data);\n\t\t\t\t\t\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.max = function(variable){\n\t\t\t\t\t\/\/ Return the maximum value for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.max(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.meanAbsoluteDeviation = function(variable){\n\t\t\t\t\t\/\/ Return the standardDeviation of the values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.meanAbsoluteDeviation(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\t\t\t\tthis.median = function(variable){\n\t\t\t\t\t\/\/ Return the median value for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\t\t\t\t    \n\t\t\t\t\treturn app.stats.median(this.getNumbers(variable))\n\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.midrange = function(variable){\n\t\t\t\t\t\/\/ Return the midrange  for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.midrange(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\t\t\t\tthis.min = function(variable){\n\t\t\t\t\t\/\/ Return the minimum value for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.min(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tthis.modes = function(variable){\n\t\t\t\t\t\/\/ Return an array providing the modes for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.modes(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.removeVariable = function(variable){\n\t\t\t\t\t\/\/ Removes all the data for `variable` from localStorage\n\t\t\t\t\t\/\/ Returns `this`\n\n\t\t\t\t\tvar data = this.getData();\n\t\t\t\t\tvar newData = data.map(function(thisObj){\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tdelete thisObj[variable];\n\t\t\t\t\t\t\treturn thisObj;\n\t\t\t\t\t\t}catch(er){}\n\t\t\t\t\t})\n\n\t\t\t\t\tthis.getScreen().setLocalProperty(\"data\",newData);\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\n\n\n\n\t\t\t\tthis.range = function(variable){\n\t\t\t\t\t\/\/ Return the range for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.range(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\n\t\t\t\tthis.save = function(){\n\t\t\t\t\t\/\/ Save the data \n\t\t\t\t\t\/\/ Returns `this`\n\t\t\t\t\t\n\t\t\t\t\tdata = this.getData();\n\n\t\t\t\t\tvar thisData = {};\n\t\t\t\t\t\n\t\t\t\t\t\/\/ go through all Form items\n\t\t\t\t\tjQuery(app._formItemsCSSSelector).each(function( index ) {\n\t\t\t\t\t\t\/\/ If there is no dataset.variable, it is not an Item so skip\n\t\t\t\t\t\tif(this.dataset.variable && this.dataset.variable != \"undefined\")\n\t\t\t\t\t\t\tthisData[this.dataset.variable] = app.getVariable(this.dataset.variable);\n\t\t\t\t\t});\n\n\n\t\t\t\t\t\/\/ Special Case: any variable starting with \"data_\" has special meaning\n\t\t\t\t\ttry{\n\t\t\t\t\t\tfor (var key in thisData) {\n\t\t\t\t\t\t\tif (thisData.hasOwnProperty(key) && key.match(\/^data_\/)) {\n\t\t\t\t\t\t\t\tvar name = key\n\t\t\t\t\t\t\t\tvar val  = thisData[key];\n\n\t\t\t\t\t\t\t\t\/\/ Remove this key\n\t\t\t\t\t\t\t\tdelete thisData[key];\n\n\t\t\t\t\t\t\t\ttry{\n\n\t\t\t\t\t\t\t\t\t\/\/ Calculations\n\n\t\t\t\t\t\t\t\t\tif(name.match(\/^data_calculation_\/)){\n\t\t\t\t\t\t\t\t\t\t\/\/ the name of the field follows `data_calculation_`\n\t\t\t\t\t\t\t\t\t\tname = name.replace(\/^data_calculation_\/,\"\");\n\t\t\t\t\t\t\t\t\t\tvar formula = val;\n\n\t\t\t\t\t\t\t\t\t\t\/\/ the formula is saved in the `val`\n\t\t\t\t\t\t\t\t\t\t\/\/ remove the arithmetic operators to get a list of variables\n\t\t\t\t\t\t\t\t\t\tvar variables = formula.replace(\/[+\\-*\/%() ]\/g,\",\").split(\",\");\n\n\t\t\t\t\t\t\t\t\t\t\/\/ repalce all variables in the formula with values from the other fields\n\t\t\t\t\t\t\t\t\t\tfor(var k in thisData){\n\t\t\t\t\t\t\t\t\t\t\tif (thisData.hasOwnProperty(k) && !k.match(\/^data_\/) && !isNaN(thisData[k])) {\n\t\t\t\t\t\t\t\t\t\t\t\t\/\/ if k appears in the formula, replace all occurences with the numeric value\n\t\t\t\t\t\t\t\t\t\t\t\tif(variables.indexOf(k) != -1){\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar thisVal = parseFloat(thisData[k]);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar myRE = new RegExp(k, 'g');\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tformula = formula.replace(myRE,thisVal)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\/\/ Now try evaluate the formula\n\t\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\t\tvar outcome;\n\t\t\t\t\t\t\t\t\t\t\teval(\"outcome = \"+formula);\n\t\t\t\t\t\t\t\t\t\t\tif(!isNaN(outcome))\n\t\t\t\t\t\t\t\t\t\t\t\tthisData[name] = outcome;\n\t\t\t\t\t\t\t\t\t\t}catch(er){}\n\n\t\t\t\t\t\t\t\t\t} \n\n\t\t\t\t\t\t\t\t}catch(er){\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"data.save() data_\")\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ Add thisData to the saved data\n\t\t\t\t\tdata.push(thisData);\n\t\t\t\t\tthis.getScreen().setLocalProperty(\"data\",data);\n\t\t\t\t\t\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.showData = function(selectors,filters){\n\t\t\t\t\t\/\/ Shows the data in an HTML table on the screen.\n\t\t\t\t\t\/\/ Optional `selectors` is an array of variable names to be shown (Default all) \n\t\t\t\t\t\/\/ Optional `filters` applies conditions to filter the data (see this.getData() for details on filters)\n\t\t\t\t\t\/\/ Returns `this`\n\n\n\t\t\t\t\tvar scn = this.getScreen();\n\n\t\t\t\t\tif(jQuery('#data-'+scn.id).length)\n\t\t\t\t\t\tjQuery('#data-'+scn.id).remove();\n\n\t\t\t\t\tvar div = document.createElement('div');\n\t\t\t\t\tdiv.id = \"data-\"+scn.id;\n\t\t\t\t\tdiv.className = \"datatable\";\n\t\t\t\t\tdiv.appendChild(this._htmlBuildTable(this.getData(selectors,filters)))\n\t\t\t\t\tdiv.style += \"; overflow: scroll; \";\n\t\t\t\t\t\n\t\t\t\t\ttry{\n\t\t\t\t\t\tjQuery('#'+app.getItem().domId).after(div)\n\t\t\t\t\t}catch(er){\n\t\t\t\t\t\tapp.handleError(er,\"Data.showData() jQuery.after()\");\n\t\t\t\t\t}\n\n\t\t\t\t\tapp.refreshScroll();\n\t\t\t\t}\n\n\n\n\n\n\t\t\t\tthis.standardDeviation = function(variable){\n\t\t\t\t\t\/\/ Return the standardDeviation of the values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.standardDeviation(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.sum = function(variable){\n\t\t\t\t\t\/\/ Return the sum of the values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.sum(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.variance = function(variable){\n\t\t\t\t\t\/\/ Return the variance of the values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.variance(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\t\t\t\tthis.zScores = function(variable){\n\t\t\t\t\t\/\/ Return an array of zScores for the values for `variable`\n\t\t\t\t\t\/\/ If `variable` not passed in use the first column\n\n\t\t\t\t\tvariable = variable || this.getFirstVariable();\n\t\t\t\t\tif(!variable)\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\treturn app.stats.zScores(this.getNumbers(variable))\n\n\t\t\t\t}\n\n\n\n\n\t\t\t\t\/\/ Builds the HTML Table \n\t\t\t\tthis._htmlBuildTable = function(arr) {\n\t\t\t\t\tvar _table_ = document.createElement('table'),\n\t\t\t\t\t\t_tr_ = document.createElement('tr'),\n\t\t\t\t\t\t_th_ = document.createElement('th'),\n\t\t\t\t\t\t_td_ = document.createElement('td');\n\n\t\t\t\t\t \n\t\t\t\t\t var table = _table_.cloneNode(false),\n\t\t\t\t         columns = this._htmlAddAllColumnHeaders(arr, table);\n\t\t\t\t\t for (var i=0, maxi=arr.length; i < maxi; ++i) {\n\t\t\t\t         var tr = _tr_.cloneNode(false);\n\t\t\t\t         for (var j=0, maxj=columns.length; j < maxj ; ++j) {\n\t\t\t\t             var td = _td_.cloneNode(false);\n\t\t\t\t                 cellValue = arr[i][columns[j]];\n\t\t\t\t             td.appendChild(document.createTextNode(arr[i][columns[j]] || ''));\n\t\t\t\t\t\t\t tr.appendChild(td);\n\t\t\t\t         }\n\t\t\t\t         table.appendChild(tr);\n\t\t\t\t     }\n\t\t\t\t     return table;\n\t\t\t\t }\n\n\t\t\t\t \/\/ Adds a header row to the table and returns the set of columns.\n\t\t\t\t \/\/ Need to do union of keys from all records as some records may not contain\n\t\t\t\t \/\/ all records\n\t\t\t\t this._htmlAddAllColumnHeaders = function(arr, table)\n\t\t\t\t {\n\t\t\t\t\tvar _table_ = document.createElement('table'),\n\t\t\t\t\t\t_tr_ = document.createElement('tr'),\n\t\t\t\t\t\t_th_ = document.createElement('th'),\n\t\t\t\t\t\t_td_ = document.createElement('td');     var columnSet = [],\n\t\t\t\t         tr = _tr_.cloneNode(false);\n\t\t\t\t     for (var i=0, l=arr.length; i < l; i++) {\n\t\t\t\t         for (var key in arr[i]) {\n\t\t\t\t             if (arr[i].hasOwnProperty(key) && columnSet.indexOf(key)===-1) {\n\t\t\t\t                 columnSet.push(key);\n\t\t\t\t                 var th = _th_.cloneNode(false);\n\t\t\t\t                 th.appendChild(document.createTextNode(key));\n\t\t\t\t                 tr.appendChild(th);\n\t\t\t\t             }\n\t\t\t\t         }\n\t\t\t\t     }\n\t\t\t\t     table.appendChild(tr);\n\t\t\t\t     return columnSet;\n\t\t\t\t }\n\n\n\n\n\t\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\tapp.stats = {\t\n\n\t\t\t\tmax: function(array) {\n\t\t\t\t\treturn Math.max.apply(null, array);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmin: function(array) {\n\t\t\t\t\treturn Math.min.apply(null, array);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trange: function(array) {\n\t\t\t\t\treturn app.stats.max(array) - app.stats.min(array);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmidrange: function(array) {\n\t\t\t\t\treturn app.stats.range(array) \/ 2;\n\t\t\t\t},\n\n\t\t\t\tsum: function(array) {\n\t\t\t\t\tvar num = 0;\n\t\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) num += array[i];\n\t\t\t\t\treturn num;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmean: function(array) {\n\t\t\t\t\treturn app.stats.sum(array) \/ array.length;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmedian: function(array) {\n\t\t\t\t\tarray.sort(function(a, b) {\n\t\t\t\t\t\treturn a - b;\n\t\t\t\t\t});\n\t\t\t\t\tvar mid = array.length \/ 2;\n\t\t\t\t\treturn mid % 1 ? array[mid - 0.5] : (array[mid - 1] + array[mid]) \/ 2;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmodes: function(array) {\n\t\t\t\t\tif (!array.length) return [];\n\t\t\t\t\tvar modeMap = {},\n\t\t\t\t\t\tmaxCount = 0,\n\t\t\t\t\t\tmodes = [];\n\n\t\t\t\t\tarray.forEach(function(val) {\n\t\t\t\t\t\tif (!modeMap[val]) modeMap[val] = 1;\n\t\t\t\t\t\telse modeMap[val]++;\n\n\t\t\t\t\t\tif (modeMap[val] > maxCount) {\n\t\t\t\t\t\t\tmodes = [val];\n\t\t\t\t\t\t\tmaxCount = modeMap[val];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (modeMap[val] === maxCount) {\n\t\t\t\t\t\t\tmodes.push(val);\n\t\t\t\t\t\t\tmaxCount = modeMap[val];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn modes;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tvariance: function(array) {\n\t\t\t\t\tvar mean = app.stats.mean(array);\n\t\t\t\t\treturn app.stats.mean(array.map(function(num) {\n\t\t\t\t\t\treturn Math.pow(num - mean, 2);\n\t\t\t\t\t}));\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tstandardDeviation: function(array) {\n\t\t\t\t\treturn Math.sqrt(app.stats.variance(array));\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tmeanAbsoluteDeviation: function(array) {\n\t\t\t\t\tvar mean = app.stats.mean(array);\n\t\t\t\t\treturn app.stats.mean(array.map(function(num) {\n\t\t\t\t\t\treturn Math.abs(num - mean);\n\t\t\t\t\t}));\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tzScores: function(array) {\n\t\t\t\t\tvar mean = app.stats.mean(array);\n\t\t\t\t\tvar standardDeviation = app.stats.standardDeviation(array);\n\t\t\t\t\treturn array.map(function(num) {\n\t\t\t\t\t\treturn (num - mean) \/ standardDeviation;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t\/\/ Function aliases:\n\t\t\tapp.stats.average = app.stats.mean;\n\t\t\tapp.stats.avg = app.stats.mean;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\tDevice.prototype.toString = function deviceToString() {\n\t\t\t  var ret = 'Device ' + this.id;\n\t\t\t  return ret;\n\t\t\t}\n\n\n\t\t\t\/\/ INITIALISE App\n\t\t\t\/\/setTimeout(function(){app.init()},100);\n\n\t\t\t\/\/ For PhoneGap Cordova, uncomment this method\n\t\t\t\/\/appbuilder.app.ready = function() {\n\t\t\t\tapp._init()\n\t\t\t\/\/}\n\n\n\n\n\n\t\t} catch(er){console.log(\"ERROR IN app.js\",er)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\napp.appcar = new function(){\n\n    this.version = 2.4;\n    this.initialised = false;\n    this.lastClassName = \"\";\n\tthis.motionDrivingLastLogo = \"\";\n\n    this.init = function(){\n\n        if (typeof jQuery == 'undefined' || typeof jQuery.ajaxq != 'function'){\n            console.log(\"   AppCarStartup no jQuery\");\n            setTimeout(app.appcar.init,1000)\n\n        }else{\n            \/\/ default calibration is 1023 both sides (full speed)\n            \/\/app.analogWrite(null,2,1023);\n            \/\/app.analogWrite(null,6,1023);\n\n\n              app.addHoverImages([\n                {class:\"forward\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684701\",doActions:true},\n                {class:\"backward\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684806\",doActions:true},\n                {class:\"goleft\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684808\",doActions:true},\n                {class:\"right\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684810\",doActions:true},\n                {class:\"arcfl\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212555\",doActions:true},\n                {class:\"arcfr\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212556\",doActions:true},\n                {class:\"arcbl\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212557\",doActions:true},\n                {class:\"arcbr\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212558\",doActions:true},\n                {class:\"stop\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684820\",doActions:true}\n              ]);\n\n\n            var screenSettings = function(){\n            \ttry{\n\n\t                app.getScreen(this).disableScroll()\n\n\n\t\t\t\t\tapp.addHoverImages([\n\t\t\t\t\t\t{class:\"forward\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684701\",doActions:true},\n\t\t\t\t\t\t{class:\"backward\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684806\",doActions:true},\n\t\t\t\t\t\t{class:\"goleft\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684808\",doActions:true},\n\t\t\t\t\t\t{class:\"right\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684810\",doActions:true},\n\t\t\t\t\t\t{class:\"arcfl\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212555\",doActions:true},\n\t\t\t\t\t\t{class:\"arcfr\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212556\",doActions:true},\n\t\t\t\t\t\t{class:\"arcbl\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212557\",doActions:true},\n\t\t\t\t\t\t{class:\"arcbr\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212558\",doActions:true},\n\t\t\t\t\t\t{class:\"stop\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684820\",doActions:true}\n\t\t\t\t\t]);\n            \t}catch(er){}\n\n            }\n\n\n            var motionDriving = function(screenId){\n            \n                if(screenId)\n                    app._motionDrivingScreenId = screenId;\n\n\n                if(app.getScreen().id != app._motionDrivingScreenId)\n                    return;\n                \n                var x = parseFloat(app.deviceMotionEvent.x).toFixed(2)\n                var y = parseFloat(app.deviceMotionEvent.y).toFixed(2);\n                var cell = \"\";\n\n                var iOS = \/iPad|iPhone|iPod\/.test(navigator.userAgent) && !window.MSStream;\n                if(iOS){\n                    x= -1*x;\n                    y= -1*y;\n                }\n                \n                if(y <2.5)\n                    cell += \"r1\";\n                else if(y<7)\n                    cell += \"r2\";\n                else\n                    cell += \"r3\";\n\n                if(x>4)\n                    cell += \"c1\";\n                else if(x>-4)\n                    cell += \"c2\";\n                else\n                    cell += \"c3\";\n\n                \n                \n                var logoCmd = \"\";\n                var className = \"\";\n                switch(cell){\n                    case \"r1c1\":\n                        logoCmd = \"arcfl\"; className = logoCmd; break;\n                    case \"r1c2\":\n                        logoCmd = \"fd\"; className = \"forward\"; break;\n                    case \"r1c3\":\n                        logoCmd = \"arcfr\"; className = logoCmd; break;\n                    case \"r2c1\":\n                        logoCmd = \"lt\"; className = \"goleft\"; break;\n                    case \"r2c2\":\n                        logoCmd = \"st\"; className = \"stop\"; break;\n                    case \"r2c3\":\n                        logoCmd = \"rt\"; className = \"right\"; break;\n                    case \"r3c1\":\n                        logoCmd = \"arcbl\"; className = logoCmd; break;\n                    case \"r3c2\":\n                        logoCmd = \"bk\"; className = \"backward\"; break;\n                    case \"r3c3\":\n                        logoCmd = \"arcbr\"; className = logoCmd; break;\n                }\n                     \n\n\n\n                        \n                var title = \"\";\n                title += \"x: \" + x;\n                title += \" - y: \" + y;\n\/\/                title += \" - \" + cell;\n                title += \" - cmd: \" + logoCmd;\n                app.getScreen().setTitle(title)\n                \n\n\t\t\t\t\/\/ I the command has changed                \n                if(app.appcar.motionDrivingLastLogo != logoCmd){\n                    app.logo(logoCmd);\n\n                    if(app.appcar.lastClassName > \"\"){\n\t\t \t\t\t\tvar oldHoverItem = app.getItem(app.appcar.lastClassName);\n\n\t\t\t\t\t\t\/\/ reset the hover image on oldHoverItem if it has a hover image\n\t\t\t\t\t\tif(oldHoverItem && oldHoverItem.hoverImage && oldHoverItem.originalImage)\n\t\t\t\t\t\t\toldHoverItem.setImage(oldHoverItem.originalImage)\n\n                    }\n\n                    if(className > \"\"){\n\t\t \t\t\t\tvar thisHoverItem = app.getItem(className);\n\n\t\t\t\t\t\t\/\/ set the new hover image if required\n\t\t\t\t\t\tif(thisHoverItem && thisHoverItem.hoverImage){\n\t\t\t\t\t\t\tthisHoverItem.setImage(thisHoverItem.hoverImage)\n\t\t\t\t\t\t}\n\n                    }\n\n                    app.appcar.motionDrivingLastLogo = logoCmd;\n                    app.appcar.lastClassName = className;\n\n\n                }\n                \n\n                setTimeout(motionDriving,50);\n            }\n            \n            \n            app.addScreenEvent('drive',screenSettings)\n            app.addScreenEvent(11910914,screenSettings); \/\/ drive screen id because classname doesn't work on iOS\n\n            app.addScreenEvent('motiondriving',function(){\n\t\t\t    app.appcar.lastClassName = \"\";\n\t\t\t\tapp.appcar.motionDrivingLastLogo = \"\";\n                app._motionDrivingScreenId = app.getIdFromDOMId(this.id);\n            \t\n                setTimeout(app.appcar.loadHoverImages,500);\n                setTimeout(motionDriving,1000);\n            });\n            \n\n            \/\/ update the Connection status\n            setInterval(function(){\n    return;\n                var scn = app.getScreen()\n                if(app._defaultDevice){\n                    \/\/ update the status in the title bar\n                    scn.setTitle(\"Connected to: \"+app._defaultDevice);\n                    scn.setTitleBackgroundColor(\"blue\");\n                } else {\n                    scn.setTitle(\"Not connected\");\n                    scn.setTitleBackgroundColor(\"darkgrey\");\n\n                }\n            },1000);\n\n          \n      }\n    \n\n        this.initialised = true;      \n    }\n\n\n\tthis.loadHoverImages = function(){\n    \ttry{\n\n\t\t\tapp.addHoverImages([\n\t\t\t\t{class:\"forward\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684701\",doActions:true},\n\t\t\t\t{class:\"backward\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684806\",doActions:true},\n\t\t\t\t{class:\"goleft\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684808\",doActions:true},\n\t\t\t\t{class:\"right\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684810\",doActions:true},\n\t\t\t\t{class:\"arcfl\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212555\",doActions:true},\n\t\t\t\t{class:\"arcfr\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212556\",doActions:true},\n\t\t\t\t{class:\"arcbl\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212557\",doActions:true},\n\t\t\t\t{class:\"arcbr\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/6212558\",doActions:true},\n\t\t\t\t{class:\"stop\",url:\"http:\/\/d3s8dljl1bm5rz.cloudfront.net\/5684820\",doActions:true}\n\t\t\t]);\n    \t}catch(er){}\n\n    }\n\n\n}\n\n\n\napp.init = function(){\n    app.appcar.init();    \n}","events":[],"iotConfig":{"inputs":{"analogue":[31,32],"digital":[]},"outputs":{"digital":[4,5,6,7,8,9,12,13,1,19,16],"pwm":[{"pin":10,"freq":1},{"pin":11,"freq":1}]},"delay":200},"pinMap":{"proximity1":{"pin":31,"type":"analog","direction":"input","max":100,"min":0,"unit":"mm","title":"Proximity Left"},"proximity2":{"pin":32,"type":"analog","direction":"input","max":100,"min":0,"unit":"mm","title":"Proximity Right"},"lma":{"pin":4,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Left Motor A"},"lmb":{"pin":5,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Left Motor B"},"rma":{"pin":6,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Right Motor A"},"rmb":{"pin":7,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Right Motor B"},"pwma":{"pin":10,"type":"pwm","direction":"output","max":100,"min":0,"unit":null,"title":"Left Motor PWM"},"pwmb":{"pin":11,"type":"pwm","direction":"output","max":100,"min":0,"unit":null,"title":"Right Motor PWM"},"led1":{"pin":8,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Headlights"},"led2":{"pin":9,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Taillights"},"led3":{"pin":12,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Left Indicator"},"led4":{"pin":13,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Right Indicator"},"led5":{"pin":1,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Reverse Lights"},"fg":{"pin":19,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Led"},"horn":{"pin":16,"type":"digital","direction":"output","max":null,"min":null,"unit":null,"title":"Relay"}}}}});